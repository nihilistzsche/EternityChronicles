//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Documents\Source\Repos\EternityChronicles\IronDragon\Parser\DragonParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IronDragon.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DragonParser : Parser {
	public const int
		NEWLINE=1, SEMICOLON=2, IF=3, WHILE=4, UNLESS=5, UNTIL=6, SWITCHOP=7, 
		ASSIGN=8, BREAK=9, RETRY=10, CONTINUE=11, THROW=12, LBRACE=13, RBRACE=14, 
		SWITCH=15, CASE=16, COLON=17, DEFAULT=18, LOOP=19, FOR=20, LPAREN=21, 
		IDENTIFIER=22, IN=23, RPAREN=24, DO=25, ELSE=26, RETURN=27, SET=28, CONST=29, 
		ADDASSIGN=30, SUBASSIGN=31, MULASSIGN=32, DIVASSIGN=33, MODASSIGN=34, 
		SHLASSIGN=35, SHRASSIGN=36, ANDASSIGN=37, ORASSIGN=38, XORASSIGN=39, EXPASSIGN=40, 
		CONDASSIGNO=41, CONDASSIGNA=42, INCREMENT=43, DECREMENT=44, OP=45, BACKWARDPIPE=46, 
		FORWARDPIPE=47, LOGICALOR=48, LOGICALXOR=49, LOGICALAND=50, COMPARE=51, 
		REGEXMATCH=52, REGEXNOMATCH=53, EQUAL=54, NOTEQUAL=55, LESSTHANEQUAL=56, 
		LESSTHAN=57, GREATERTHANEQUAL=58, GREATERTHAN=59, BITWISEXOR=60, BITWISEOR=61, 
		BITWISEAND=62, SHIFTLEFT=63, SHIFTRIGHT=64, PLUS=65, MINUS=66, MULTIPLY=67, 
		DIVIDE=68, MODULO=69, NOT=70, BITWISEINVERSE=71, TYPEOF=72, YIELD=73, 
		UNDEF=74, STRING=75, REMOVE=76, EXPONENT=77, LBRACKET=78, RBRACKET=79, 
		HASH=80, COMMA=81, BRACKETS=82, NUMBER=83, INTEGER=84, NIL=85, TRUE=86, 
		FALSE=87, DOT=88, CLASS=89, SELF=90, SUPER=91, CONTEXT=92, IRANGE=93, 
		ERANGE=94, WHENCOMP=95, UPLUS=96, UMINUS=97, BRACKETSASSIGN=98, DCOLON=99, 
		DEF=100, END=101, ALIAS=102, INCLUDE=103, MODULE=104, BEGIN=105, ENSURE=106, 
		RESCUE=107, SYNC=108, REGEX=109, COMMENT=110;
	public const int
		RULE_program = 0, RULE_block_contents = 1, RULE_term = 2, RULE_term_top_level_statement = 3, 
		RULE_top_level_statement = 4, RULE_conditional_statement = 5, RULE_statement = 6, 
		RULE_block = 7, RULE_switch_construct = 8, RULE_case_block = 9, RULE_default_block = 10, 
		RULE_loop_construct = 11, RULE_for_construct = 12, RULE_for_in_construct = 13, 
		RULE_until_construct = 14, RULE_do_until_construct = 15, RULE_while_construct = 16, 
		RULE_do_while_construct = 17, RULE_unless_construct = 18, RULE_if_else_construct = 19, 
		RULE_else_part = 20, RULE_return_expression = 21, RULE_expression = 22, 
		RULE_prefix_increment = 23, RULE_postfix_increment = 24, RULE_assignment = 25, 
		RULE_prefix_op = 26, RULE_postfix_op = 27, RULE_arg = 28, RULE_op_expression = 29, 
		RULE_pipe_op = 30, RULE_pipe_expression = 31, RULE_logical_or_expression = 32, 
		RULE_logical_xor_expression = 33, RULE_logical_and_expression = 34, RULE_equality_op_eq_neq = 35, 
		RULE_equality_op = 36, RULE_equality_expression = 37, RULE_comparison_op = 38, 
		RULE_comparison_expression = 39, RULE_bitwise_or_op = 40, RULE_bitwise_or_expression = 41, 
		RULE_bitwise_and_expression = 42, RULE_shift_op = 43, RULE_shift_expression = 44, 
		RULE_additive_op = 45, RULE_additive_expression = 46, RULE_multiplicative_op = 47, 
		RULE_multiplicative_expression = 48, RULE_unary_expression = 49, RULE_power_expression = 50, 
		RULE_atom = 51, RULE_primary_right_side_parens = 52, RULE_primary_right_side_access = 53, 
		RULE_primary_right_side_yield_block = 54, RULE_primary_right_side_parens_access = 55, 
		RULE_primary_function_call = 56, RULE_primary_left_side = 57, RULE_primary = 58, 
		RULE_hash = 59, RULE_single_hash_key = 60, RULE_hash_key = 61, RULE_array = 62, 
		RULE_literal = 63, RULE_symbol = 64, RULE_lvalue = 65, RULE_lvalue_instance_ref_opt = 66, 
		RULE_lvalue_instance_ref = 67, RULE_lvalue_method_change = 68, RULE_lvalue_access = 69, 
		RULE_variable = 70, RULE_call_args = 71, RULE_call_arg_single_hash = 72, 
		RULE_call_arg = 73, RULE_first_arg = 74, RULE_first_var_arg = 75, RULE_first_block_arg = 76, 
		RULE_end_var_arg = 77, RULE_end_block_arg = 78, RULE_next_arg = 79, RULE_definition_argument_list_no_paren = 80, 
		RULE_definition_argument_list = 81, RULE_function_name = 82, RULE_function_definition = 83, 
		RULE_anonymous_function = 84, RULE_yield_block = 85, RULE_do_yield_block = 86, 
		RULE_parallel_assign_left = 87, RULE_parallel_assign_left_item = 88, RULE_parallel_assign_right = 89, 
		RULE_parallel_assign_right_item = 90, RULE_alias = 91, RULE_alias_part = 92, 
		RULE_include = 93, RULE_class_declaration = 94, RULE_anonymous_class_declaration = 95, 
		RULE_module_declaration = 96, RULE_begin_construct = 97, RULE_rescue_block = 98, 
		RULE_rescue_else_block = 99, RULE_rescue_ensure_block = 100, RULE_identifiers = 101, 
		RULE_sync_construct = 102;
	public static readonly string[] ruleNames = {
		"program", "block_contents", "term", "term_top_level_statement", "top_level_statement", 
		"conditional_statement", "statement", "block", "switch_construct", "case_block", 
		"default_block", "loop_construct", "for_construct", "for_in_construct", 
		"until_construct", "do_until_construct", "while_construct", "do_while_construct", 
		"unless_construct", "if_else_construct", "else_part", "return_expression", 
		"expression", "prefix_increment", "postfix_increment", "assignment", "prefix_op", 
		"postfix_op", "arg", "op_expression", "pipe_op", "pipe_expression", "logical_or_expression", 
		"logical_xor_expression", "logical_and_expression", "equality_op_eq_neq", 
		"equality_op", "equality_expression", "comparison_op", "comparison_expression", 
		"bitwise_or_op", "bitwise_or_expression", "bitwise_and_expression", "shift_op", 
		"shift_expression", "additive_op", "additive_expression", "multiplicative_op", 
		"multiplicative_expression", "unary_expression", "power_expression", "atom", 
		"primary_right_side_parens", "primary_right_side_access", "primary_right_side_yield_block", 
		"primary_right_side_parens_access", "primary_function_call", "primary_left_side", 
		"primary", "hash", "single_hash_key", "hash_key", "array", "literal", 
		"symbol", "lvalue", "lvalue_instance_ref_opt", "lvalue_instance_ref", 
		"lvalue_method_change", "lvalue_access", "variable", "call_args", "call_arg_single_hash", 
		"call_arg", "first_arg", "first_var_arg", "first_block_arg", "end_var_arg", 
		"end_block_arg", "next_arg", "definition_argument_list_no_paren", "definition_argument_list", 
		"function_name", "function_definition", "anonymous_function", "yield_block", 
		"do_yield_block", "parallel_assign_left", "parallel_assign_left_item", 
		"parallel_assign_right", "parallel_assign_right_item", "alias", "alias_part", 
		"include", "class_declaration", "anonymous_class_declaration", "module_declaration", 
		"begin_construct", "rescue_block", "rescue_else_block", "rescue_ensure_block", 
		"identifiers", "sync_construct"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "SEMICOLON", "IF", "WHILE", "UNLESS", "UNTIL", "SWITCHOP", 
		"ASSIGN", "BREAK", "RETRY", "CONTINUE", "THROW", "LBRACE", "RBRACE", "SWITCH", 
		"CASE", "COLON", "DEFAULT", "LOOP", "FOR", "LPAREN", "IDENTIFIER", "IN", 
		"RPAREN", "DO", "ELSE", "RETURN", "SET", "CONST", "ADDASSIGN", "SUBASSIGN", 
		"MULASSIGN", "DIVASSIGN", "MODASSIGN", "SHLASSIGN", "SHRASSIGN", "ANDASSIGN", 
		"ORASSIGN", "XORASSIGN", "EXPASSIGN", "CONDASSIGNO", "CONDASSIGNA", "INCREMENT", 
		"DECREMENT", "OP", "BACKWARDPIPE", "FORWARDPIPE", "LOGICALOR", "LOGICALXOR", 
		"LOGICALAND", "COMPARE", "REGEXMATCH", "REGEXNOMATCH", "EQUAL", "NOTEQUAL", 
		"LESSTHANEQUAL", "LESSTHAN", "GREATERTHANEQUAL", "GREATERTHAN", "BITWISEXOR", 
		"BITWISEOR", "BITWISEAND", "SHIFTLEFT", "SHIFTRIGHT", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "NOT", "BITWISEINVERSE", "TYPEOF", "YIELD", 
		"UNDEF", "STRING", "REMOVE", "EXPONENT", "LBRACKET", "RBRACKET", "HASH", 
		"COMMA", "BRACKETS", "NUMBER", "INTEGER", "NIL", "TRUE", "FALSE", "DOT", 
		"CLASS", "SELF", "SUPER", "CONTEXT", "IRANGE", "ERANGE", "WHENCOMP", "UPLUS", 
		"UMINUS", "BRACKETSASSIGN", "DCOLON", "DEF", "END", "ALIAS", "INCLUDE", 
		"MODULE", "BEGIN", "ENSURE", "RESCUE", "SYNC", "REGEX", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DragonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DragonParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public Block_contentsContext block_contents() {
			return GetRuleContext<Block_contentsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(DragonParser.Eof, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Top_level_statementContext top_level_statement() {
			return GetRuleContext<Top_level_statementContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 218;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; block_contents();
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE || _la==SEMICOLON) {
					{
					{
					State = 207; term();
					}
					}
					State = 212;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 213; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; top_level_statement();
				State = 216; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_contentsContext : ParserRuleContext {
		public Term_top_level_statementContext[] term_top_level_statement() {
			return GetRuleContexts<Term_top_level_statementContext>();
		}
		public Term_top_level_statementContext term_top_level_statement(int i) {
			return GetRuleContext<Term_top_level_statementContext>(i);
		}
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Block_contentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_contents; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_contents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_contentsContext block_contents() {
		Block_contentsContext _localctx = new Block_contentsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block_contents);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 222;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case IF:
					case WHILE:
					case UNLESS:
					case UNTIL:
					case BREAK:
					case RETRY:
					case CONTINUE:
					case THROW:
					case LBRACE:
					case SWITCH:
					case COLON:
					case LOOP:
					case FOR:
					case LPAREN:
					case IDENTIFIER:
					case DO:
					case RETURN:
					case SET:
					case CONST:
					case INCREMENT:
					case DECREMENT:
					case OP:
					case BITWISEXOR:
					case PLUS:
					case MINUS:
					case MULTIPLY:
					case NOT:
					case BITWISEINVERSE:
					case TYPEOF:
					case YIELD:
					case UNDEF:
					case STRING:
					case REMOVE:
					case LBRACKET:
					case BRACKETS:
					case NUMBER:
					case INTEGER:
					case NIL:
					case TRUE:
					case FALSE:
					case CLASS:
					case SELF:
					case SUPER:
					case CONTEXT:
					case DEF:
					case ALIAS:
					case INCLUDE:
					case MODULE:
					case BEGIN:
					case SYNC:
					case REGEX:
						{
						State = 220; term_top_level_statement();
						}
						break;
					case NEWLINE:
					case SEMICOLON:
						{
						State = 221; term();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 226;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(DragonParser.NEWLINE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(DragonParser.SEMICOLON, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_la = _input.La(1);
			if ( !(_la==NEWLINE || _la==SEMICOLON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_top_level_statementContext : ParserRuleContext {
		public Top_level_statementContext top_level_statement() {
			return GetRuleContext<Top_level_statementContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Term_top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_top_level_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_top_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term_top_level_statementContext term_top_level_statement() {
		Term_top_level_statementContext _localctx = new Term_top_level_statementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_term_top_level_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; top_level_statement();
			State = 230; term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementContext : ParserRuleContext {
		public Conditional_statementContext conditional_statement() {
			return GetRuleContext<Conditional_statementContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementContext top_level_statement() {
		Top_level_statementContext _localctx = new Top_level_statementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_top_level_statement);
		try {
			State = 234;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; conditional_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode IF() { return GetToken(DragonParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(DragonParser.WHILE, 0); }
		public ITerminalNode UNLESS() { return GetToken(DragonParser.UNLESS, 0); }
		public ITerminalNode UNTIL() { return GetToken(DragonParser.UNTIL, 0); }
		public ITerminalNode SWITCHOP() { return GetToken(DragonParser.SWITCHOP, 0); }
		public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		public Conditional_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_statementContext conditional_statement() {
		Conditional_statementContext _localctx = new Conditional_statementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_conditional_statement);
		try {
			State = 256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; statement();
				State = 237; Match(IF);
				State = 238; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; statement();
				State = 241; Match(WHILE);
				State = 242; expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244; statement();
				State = 245; Match(UNLESS);
				State = 246; expression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 248; statement();
				State = 249; Match(UNTIL);
				State = 250; expression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 252; statement();
				State = 253; Match(SWITCHOP);
				State = 254; hash();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Parallel_assign_leftContext parallel_assign_left() {
			return GetRuleContext<Parallel_assign_leftContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(DragonParser.ASSIGN, 0); }
		public Parallel_assign_rightContext parallel_assign_right() {
			return GetRuleContext<Parallel_assign_rightContext>(0);
		}
		public Loop_constructContext loop_construct() {
			return GetRuleContext<Loop_constructContext>(0);
		}
		public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public Module_declarationContext module_declaration() {
			return GetRuleContext<Module_declarationContext>(0);
		}
		public Switch_constructContext switch_construct() {
			return GetRuleContext<Switch_constructContext>(0);
		}
		public For_constructContext for_construct() {
			return GetRuleContext<For_constructContext>(0);
		}
		public For_in_constructContext for_in_construct() {
			return GetRuleContext<For_in_constructContext>(0);
		}
		public Until_constructContext until_construct() {
			return GetRuleContext<Until_constructContext>(0);
		}
		public Do_until_constructContext do_until_construct() {
			return GetRuleContext<Do_until_constructContext>(0);
		}
		public While_constructContext while_construct() {
			return GetRuleContext<While_constructContext>(0);
		}
		public Do_while_constructContext do_while_construct() {
			return GetRuleContext<Do_while_constructContext>(0);
		}
		public Unless_constructContext unless_construct() {
			return GetRuleContext<Unless_constructContext>(0);
		}
		public If_else_constructContext if_else_construct() {
			return GetRuleContext<If_else_constructContext>(0);
		}
		public Begin_constructContext begin_construct() {
			return GetRuleContext<Begin_constructContext>(0);
		}
		public Sync_constructContext sync_construct() {
			return GetRuleContext<Sync_constructContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(DragonParser.BREAK, 0); }
		public ITerminalNode RETRY() { return GetToken(DragonParser.RETRY, 0); }
		public ITerminalNode CONTINUE() { return GetToken(DragonParser.CONTINUE, 0); }
		public ITerminalNode THROW() { return GetToken(DragonParser.THROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_expressionContext return_expression() {
			return GetRuleContext<Return_expressionContext>(0);
		}
		public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; parallel_assign_left();
				State = 259; Match(ASSIGN);
				State = 260; parallel_assign_right();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; loop_construct();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 263; class_declaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 264; module_declaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 265; switch_construct();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 266; for_construct();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 267; for_in_construct();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 268; until_construct();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 269; do_until_construct();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 270; while_construct();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 271; do_while_construct();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 272; unless_construct();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 273; if_else_construct();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 274; begin_construct();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 275; sync_construct();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 276; alias();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 277; include();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 278; Match(BREAK);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 279; Match(RETRY);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 280; Match(CONTINUE);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 281; Match(THROW);
				State = 282; expression();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 283; return_expression();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 284; function_definition();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 285; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(DragonParser.LBRACE, 0); }
		public Block_contentsContext block_contents() {
			return GetRuleContext<Block_contentsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(DragonParser.RBRACE, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(LBRACE);
			State = 289; block_contents();
			State = 290; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_constructContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(DragonParser.SWITCH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LBRACE() { return GetToken(DragonParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(DragonParser.RBRACE, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Case_blockContext[] case_block() {
			return GetRuleContexts<Case_blockContext>();
		}
		public Case_blockContext case_block(int i) {
			return GetRuleContext<Case_blockContext>(i);
		}
		public Default_blockContext default_block() {
			return GetRuleContext<Default_blockContext>(0);
		}
		public Switch_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_constructContext switch_construct() {
		Switch_constructContext _localctx = new Switch_constructContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_switch_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(SWITCH);
			State = 293; expression();
			State = 294; Match(LBRACE);
			State = 296;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEWLINE || _la==SEMICOLON) {
				{
				State = 295; term();
				}
			}

			State = 299;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 298; case_block();
				}
				}
				State = 301;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CASE );
			State = 304;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 303; term();
				}
				break;
			}
			State = 307;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DEFAULT) {
				{
				State = 306; default_block();
				}
			}

			State = 310;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEWLINE || _la==SEMICOLON) {
				{
				State = 309; term();
				}
			}

			State = 312; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_blockContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(DragonParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(DragonParser.COLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DragonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DragonParser.COMMA, i);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Case_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_blockContext case_block() {
		Case_blockContext _localctx = new Case_blockContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_case_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(CASE);
			State = 315; expression();
			State = 320;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 316; Match(COMMA);
				State = 317; expression();
				}
				}
				State = 322;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 323; Match(COLON);
			State = 324; block();
			State = 326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 325; term();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_blockContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(DragonParser.DEFAULT, 0); }
		public ITerminalNode COLON() { return GetToken(DragonParser.COLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Default_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_blockContext default_block() {
		Default_blockContext _localctx = new Default_blockContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_default_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(DEFAULT);
			State = 329; Match(COLON);
			State = 330; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_constructContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(DragonParser.LOOP, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Loop_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_constructContext loop_construct() {
		Loop_constructContext _localctx = new Loop_constructContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_loop_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(LOOP);
			State = 333; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_constructContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(DragonParser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(DragonParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(DragonParser.SEMICOLON, i);
		}
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public For_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_constructContext for_construct() {
		For_constructContext _localctx = new For_constructContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_for_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(FOR);
			State = 336; Match(LPAREN);
			State = 337; expression();
			State = 338; Match(SEMICOLON);
			State = 339; expression();
			State = 340; Match(SEMICOLON);
			State = 341; expression();
			State = 342; Match(RPAREN);
			State = 344;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 343; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_in_constructContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(DragonParser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode IN() { return GetToken(DragonParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public For_in_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_in_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_in_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_in_constructContext for_in_construct() {
		For_in_constructContext _localctx = new For_in_constructContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_for_in_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(FOR);
			State = 347; Match(LPAREN);
			State = 348; Match(IDENTIFIER);
			State = 349; Match(IN);
			State = 350; expression();
			State = 351; Match(RPAREN);
			State = 352; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Until_constructContext : ParserRuleContext {
		public ITerminalNode UNTIL() { return GetToken(DragonParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Until_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Until_constructContext until_construct() {
		Until_constructContext _localctx = new Until_constructContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_until_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(UNTIL);
			State = 355; expression();
			State = 357;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 356; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_until_constructContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(DragonParser.DO, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode UNTIL() { return GetToken(DragonParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_until_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_until_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_until_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_until_constructContext do_until_construct() {
		Do_until_constructContext _localctx = new Do_until_constructContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_do_until_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(DO);
			State = 360; block();
			State = 361; Match(UNTIL);
			State = 362; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_constructContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(DragonParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_constructContext while_construct() {
		While_constructContext _localctx = new While_constructContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_while_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(WHILE);
			State = 365; expression();
			State = 367;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 366; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_constructContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(DragonParser.DO, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(DragonParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_constructContext do_while_construct() {
		Do_while_constructContext _localctx = new Do_while_constructContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_do_while_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(DO);
			State = 370; block();
			State = 371; Match(WHILE);
			State = 372; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_constructContext : ParserRuleContext {
		public ITerminalNode UNLESS() { return GetToken(DragonParser.UNLESS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_partContext else_part() {
			return GetRuleContext<Else_partContext>(0);
		}
		public Unless_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnless_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unless_constructContext unless_construct() {
		Unless_constructContext _localctx = new Unless_constructContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_unless_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(UNLESS);
			State = 375; expression();
			State = 376; block();
			State = 378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 377; else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_else_constructContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DragonParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_partContext else_part() {
			return GetRuleContext<Else_partContext>(0);
		}
		public If_else_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_else_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_else_constructContext if_else_construct() {
		If_else_constructContext _localctx = new If_else_constructContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_if_else_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(IF);
			State = 381; expression();
			State = 382; block();
			State = 384;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 383; else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(DragonParser.ELSE, 0); }
		public If_else_constructContext if_else_construct() {
			return GetRuleContext<If_else_constructContext>(0);
		}
		public Unless_constructContext unless_construct() {
			return GetRuleContext<Unless_constructContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_partContext else_part() {
		Else_partContext _localctx = new Else_partContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_else_part);
		try {
			State = 392;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386; Match(ELSE);
				State = 387; if_else_construct();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388; Match(ELSE);
				State = 389; unless_construct();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; Match(ELSE);
				State = 391; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_expressionContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(DragonParser.RETURN, 0); }
		public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		public Return_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_expressionContext return_expression() {
		Return_expressionContext _localctx = new Return_expressionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_return_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(RETURN);
			State = 396;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << COLON) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << OP) | (1L << BITWISEXOR))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (NOT - 65)) | (1L << (BITWISEINVERSE - 65)) | (1L << (TYPEOF - 65)) | (1L << (YIELD - 65)) | (1L << (UNDEF - 65)) | (1L << (STRING - 65)) | (1L << (REMOVE - 65)) | (1L << (LBRACKET - 65)) | (1L << (BRACKETS - 65)) | (1L << (NUMBER - 65)) | (1L << (INTEGER - 65)) | (1L << (NIL - 65)) | (1L << (TRUE - 65)) | (1L << (FALSE - 65)) | (1L << (SELF - 65)) | (1L << (SUPER - 65)) | (1L << (CONTEXT - 65)) | (1L << (REGEX - 65)))) != 0)) {
				{
				State = 395; call_args();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_expression);
		try {
			State = 400;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399; arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_incrementContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(DragonParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(DragonParser.DECREMENT, 0); }
		public Lvalue_accessContext lvalue_access() {
			return GetRuleContext<Lvalue_accessContext>(0);
		}
		public Lvalue_instance_refContext lvalue_instance_ref() {
			return GetRuleContext<Lvalue_instance_refContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Prefix_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_incrementContext prefix_increment() {
		Prefix_incrementContext _localctx = new Prefix_incrementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_prefix_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = _input.La(1);
			if ( !(_la==INCREMENT || _la==DECREMENT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 403; lvalue_access();
				}
				break;

			case 2:
				{
				State = 404; lvalue_instance_ref();
				}
				break;

			case 3:
				{
				State = 405; lvalue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_incrementContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(DragonParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(DragonParser.DECREMENT, 0); }
		public Lvalue_accessContext lvalue_access() {
			return GetRuleContext<Lvalue_accessContext>(0);
		}
		public Lvalue_instance_refContext lvalue_instance_ref() {
			return GetRuleContext<Lvalue_instance_refContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Postfix_incrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_increment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_incrementContext postfix_increment() {
		Postfix_incrementContext _localctx = new Postfix_incrementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_postfix_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 408; lvalue_access();
				}
				break;

			case 2:
				{
				State = 409; lvalue_instance_ref();
				}
				break;

			case 3:
				{
				State = 410; lvalue();
				}
				break;
			}
			State = 413;
			_la = _input.La(1);
			if ( !(_la==INCREMENT || _la==DECREMENT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(DragonParser.ASSIGN, 0); }
		public ITerminalNode ADDASSIGN() { return GetToken(DragonParser.ADDASSIGN, 0); }
		public ITerminalNode SUBASSIGN() { return GetToken(DragonParser.SUBASSIGN, 0); }
		public ITerminalNode MULASSIGN() { return GetToken(DragonParser.MULASSIGN, 0); }
		public ITerminalNode DIVASSIGN() { return GetToken(DragonParser.DIVASSIGN, 0); }
		public ITerminalNode MODASSIGN() { return GetToken(DragonParser.MODASSIGN, 0); }
		public ITerminalNode SHLASSIGN() { return GetToken(DragonParser.SHLASSIGN, 0); }
		public ITerminalNode SHRASSIGN() { return GetToken(DragonParser.SHRASSIGN, 0); }
		public ITerminalNode ANDASSIGN() { return GetToken(DragonParser.ANDASSIGN, 0); }
		public ITerminalNode ORASSIGN() { return GetToken(DragonParser.ORASSIGN, 0); }
		public ITerminalNode XORASSIGN() { return GetToken(DragonParser.XORASSIGN, 0); }
		public ITerminalNode EXPASSIGN() { return GetToken(DragonParser.EXPASSIGN, 0); }
		public ITerminalNode CONDASSIGNO() { return GetToken(DragonParser.CONDASSIGNO, 0); }
		public ITerminalNode CONDASSIGNA() { return GetToken(DragonParser.CONDASSIGNA, 0); }
		public Lvalue_accessContext lvalue_access() {
			return GetRuleContext<Lvalue_accessContext>(0);
		}
		public Lvalue_instance_refContext lvalue_instance_ref() {
			return GetRuleContext<Lvalue_instance_refContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode SET() { return GetToken(DragonParser.SET, 0); }
		public ITerminalNode CONST() { return GetToken(DragonParser.CONST, 0); }
		public Prefix_incrementContext prefix_increment() {
			return GetRuleContext<Prefix_incrementContext>(0);
		}
		public Postfix_incrementContext postfix_increment() {
			return GetRuleContext<Postfix_incrementContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_assignment);
		int _la;
		try {
			State = 428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET || _la==CONST) {
					{
					State = 415;
					_la = _input.La(1);
					if ( !(_la==SET || _la==CONST) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 421;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					State = 418; lvalue_access();
					}
					break;

				case 2:
					{
					State = 419; lvalue_instance_ref();
					}
					break;

				case 3:
					{
					State = 420; lvalue();
					}
					break;
				}
				State = 423;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << ADDASSIGN) | (1L << SUBASSIGN) | (1L << MULASSIGN) | (1L << DIVASSIGN) | (1L << MODASSIGN) | (1L << SHLASSIGN) | (1L << SHRASSIGN) | (1L << ANDASSIGN) | (1L << ORASSIGN) | (1L << XORASSIGN) | (1L << EXPASSIGN) | (1L << CONDASSIGNO) | (1L << CONDASSIGNA))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 424; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426; prefix_increment();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 427; postfix_increment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_opContext : ParserRuleContext {
		public ITerminalNode OP() { return GetToken(DragonParser.OP, 0); }
		public Op_expressionContext op_expression() {
			return GetRuleContext<Op_expressionContext>(0);
		}
		public Prefix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_opContext prefix_op() {
		Prefix_opContext _localctx = new Prefix_opContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_prefix_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(OP);
			State = 431; op_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_opContext : ParserRuleContext {
		public Op_expressionContext op_expression() {
			return GetRuleContext<Op_expressionContext>(0);
		}
		public ITerminalNode OP() { return GetToken(DragonParser.OP, 0); }
		public Postfix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_opContext postfix_op() {
		Postfix_opContext _localctx = new Postfix_opContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_postfix_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; op_expression();
			State = 434; Match(OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public Prefix_opContext prefix_op() {
			return GetRuleContext<Prefix_opContext>(0);
		}
		public Postfix_opContext postfix_op() {
			return GetRuleContext<Postfix_opContext>(0);
		}
		public Op_expressionContext op_expression() {
			return GetRuleContext<Op_expressionContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_arg);
		try {
			State = 439;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 436; prefix_op();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437; postfix_op();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 438; op_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_expressionContext : ParserRuleContext {
		public Pipe_expressionContext[] pipe_expression() {
			return GetRuleContexts<Pipe_expressionContext>();
		}
		public Pipe_expressionContext pipe_expression(int i) {
			return GetRuleContext<Pipe_expressionContext>(i);
		}
		public ITerminalNode[] OP() { return GetTokens(DragonParser.OP); }
		public ITerminalNode OP(int i) {
			return GetToken(DragonParser.OP, i);
		}
		public Op_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_expressionContext op_expression() {
		Op_expressionContext _localctx = new Op_expressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_op_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; pipe_expression();
			State = 446;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 442; Match(OP);
					State = 443; pipe_expression();
					}
					} 
				}
				State = 448;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pipe_opContext : ParserRuleContext {
		public ITerminalNode BACKWARDPIPE() { return GetToken(DragonParser.BACKWARDPIPE, 0); }
		public ITerminalNode FORWARDPIPE() { return GetToken(DragonParser.FORWARDPIPE, 0); }
		public Pipe_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipe_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pipe_opContext pipe_op() {
		Pipe_opContext _localctx = new Pipe_opContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_pipe_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			_la = _input.La(1);
			if ( !(_la==BACKWARDPIPE || _la==FORWARDPIPE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pipe_expressionContext : ParserRuleContext {
		public Logical_or_expressionContext[] logical_or_expression() {
			return GetRuleContexts<Logical_or_expressionContext>();
		}
		public Logical_or_expressionContext logical_or_expression(int i) {
			return GetRuleContext<Logical_or_expressionContext>(i);
		}
		public Pipe_opContext[] pipe_op() {
			return GetRuleContexts<Pipe_opContext>();
		}
		public Pipe_opContext pipe_op(int i) {
			return GetRuleContext<Pipe_opContext>(i);
		}
		public Pipe_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipe_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pipe_expressionContext pipe_expression() {
		Pipe_expressionContext _localctx = new Pipe_expressionContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_pipe_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; logical_or_expression();
			State = 457;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 452; pipe_op();
					State = 453; logical_or_expression();
					}
					} 
				}
				State = 459;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_or_expressionContext : ParserRuleContext {
		public Logical_xor_expressionContext[] logical_xor_expression() {
			return GetRuleContexts<Logical_xor_expressionContext>();
		}
		public Logical_xor_expressionContext logical_xor_expression(int i) {
			return GetRuleContext<Logical_xor_expressionContext>(i);
		}
		public ITerminalNode[] LOGICALOR() { return GetTokens(DragonParser.LOGICALOR); }
		public ITerminalNode LOGICALOR(int i) {
			return GetToken(DragonParser.LOGICALOR, i);
		}
		public Logical_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_or_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_or_expressionContext logical_or_expression() {
		Logical_or_expressionContext _localctx = new Logical_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_logical_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; logical_xor_expression();
			State = 465;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 461; Match(LOGICALOR);
					State = 462; logical_xor_expression();
					}
					} 
				}
				State = 467;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_xor_expressionContext : ParserRuleContext {
		public Logical_and_expressionContext[] logical_and_expression() {
			return GetRuleContexts<Logical_and_expressionContext>();
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return GetRuleContext<Logical_and_expressionContext>(i);
		}
		public ITerminalNode[] LOGICALXOR() { return GetTokens(DragonParser.LOGICALXOR); }
		public ITerminalNode LOGICALXOR(int i) {
			return GetToken(DragonParser.LOGICALXOR, i);
		}
		public Logical_xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_xor_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_xor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_xor_expressionContext logical_xor_expression() {
		Logical_xor_expressionContext _localctx = new Logical_xor_expressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_logical_xor_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; logical_and_expression();
			State = 473;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 469; Match(LOGICALXOR);
					State = 470; logical_and_expression();
					}
					} 
				}
				State = 475;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_and_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public ITerminalNode[] LOGICALAND() { return GetTokens(DragonParser.LOGICALAND); }
		public ITerminalNode LOGICALAND(int i) {
			return GetToken(DragonParser.LOGICALAND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_and_expressionContext logical_and_expression() {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_logical_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; equality_expression();
			State = 481;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 477; Match(LOGICALAND);
					State = 478; equality_expression();
					}
					} 
				}
				State = 483;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_op_eq_neqContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(DragonParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(DragonParser.NOTEQUAL, 0); }
		public Equality_op_eq_neqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_op_eq_neq; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_op_eq_neq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_op_eq_neqContext equality_op_eq_neq() {
		Equality_op_eq_neqContext _localctx = new Equality_op_eq_neqContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_equality_op_eq_neq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			_la = _input.La(1);
			if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_opContext : ParserRuleContext {
		public ITerminalNode COMPARE() { return GetToken(DragonParser.COMPARE, 0); }
		public ITerminalNode REGEXMATCH() { return GetToken(DragonParser.REGEXMATCH, 0); }
		public ITerminalNode REGEXNOMATCH() { return GetToken(DragonParser.REGEXNOMATCH, 0); }
		public Equality_op_eq_neqContext equality_op_eq_neq() {
			return GetRuleContext<Equality_op_eq_neqContext>(0);
		}
		public Equality_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_opContext equality_op() {
		Equality_opContext _localctx = new Equality_opContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_equality_op);
		try {
			State = 490;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMPARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486; Match(COMPARE);
				}
				break;
			case REGEXMATCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 487; Match(REGEXMATCH);
				}
				break;
			case REGEXNOMATCH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 488; Match(REGEXNOMATCH);
				}
				break;
			case EQUAL:
			case NOTEQUAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 489; equality_op_eq_neq();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public Equality_opContext[] equality_op() {
			return GetRuleContexts<Equality_opContext>();
		}
		public Equality_opContext equality_op(int i) {
			return GetRuleContext<Equality_opContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_equality_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; comparison_expression();
			State = 498;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 493; equality_op();
					State = 494; comparison_expression();
					}
					} 
				}
				State = 500;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		public ITerminalNode LESSTHANEQUAL() { return GetToken(DragonParser.LESSTHANEQUAL, 0); }
		public ITerminalNode LESSTHAN() { return GetToken(DragonParser.LESSTHAN, 0); }
		public ITerminalNode GREATERTHANEQUAL() { return GetToken(DragonParser.GREATERTHANEQUAL, 0); }
		public ITerminalNode GREATERTHAN() { return GetToken(DragonParser.GREATERTHAN, 0); }
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_comparison_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESSTHANEQUAL) | (1L << LESSTHAN) | (1L << GREATERTHANEQUAL) | (1L << GREATERTHAN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Bitwise_or_expressionContext[] bitwise_or_expression() {
			return GetRuleContexts<Bitwise_or_expressionContext>();
		}
		public Bitwise_or_expressionContext bitwise_or_expression(int i) {
			return GetRuleContext<Bitwise_or_expressionContext>(i);
		}
		public Comparison_opContext[] comparison_op() {
			return GetRuleContexts<Comparison_opContext>();
		}
		public Comparison_opContext comparison_op(int i) {
			return GetRuleContext<Comparison_opContext>(i);
		}
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_comparison_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; bitwise_or_expression();
			State = 509;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 504; comparison_op();
					State = 505; bitwise_or_expression();
					}
					} 
				}
				State = 511;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_or_opContext : ParserRuleContext {
		public ITerminalNode BITWISEXOR() { return GetToken(DragonParser.BITWISEXOR, 0); }
		public ITerminalNode BITWISEOR() { return GetToken(DragonParser.BITWISEOR, 0); }
		public Bitwise_or_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_or_opContext bitwise_or_op() {
		Bitwise_or_opContext _localctx = new Bitwise_or_opContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_bitwise_or_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_la = _input.La(1);
			if ( !(_la==BITWISEXOR || _la==BITWISEOR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_or_expressionContext : ParserRuleContext {
		public Bitwise_and_expressionContext[] bitwise_and_expression() {
			return GetRuleContexts<Bitwise_and_expressionContext>();
		}
		public Bitwise_and_expressionContext bitwise_and_expression(int i) {
			return GetRuleContext<Bitwise_and_expressionContext>(i);
		}
		public Bitwise_or_opContext[] bitwise_or_op() {
			return GetRuleContexts<Bitwise_or_opContext>();
		}
		public Bitwise_or_opContext bitwise_or_op(int i) {
			return GetRuleContext<Bitwise_or_opContext>(i);
		}
		public Bitwise_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_or_expressionContext bitwise_or_expression() {
		Bitwise_or_expressionContext _localctx = new Bitwise_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_bitwise_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; bitwise_and_expression();
			State = 520;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 515; bitwise_or_op();
					State = 516; bitwise_and_expression();
					}
					} 
				}
				State = 522;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_and_expressionContext : ParserRuleContext {
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public ITerminalNode[] BITWISEAND() { return GetTokens(DragonParser.BITWISEAND); }
		public ITerminalNode BITWISEAND(int i) {
			return GetToken(DragonParser.BITWISEAND, i);
		}
		public Bitwise_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_and_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_and_expressionContext bitwise_and_expression() {
		Bitwise_and_expressionContext _localctx = new Bitwise_and_expressionContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_bitwise_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; shift_expression();
			State = 528;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 524; Match(BITWISEAND);
					State = 525; shift_expression();
					}
					} 
				}
				State = 530;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_opContext : ParserRuleContext {
		public ITerminalNode SHIFTLEFT() { return GetToken(DragonParser.SHIFTLEFT, 0); }
		public ITerminalNode SHIFTRIGHT() { return GetToken(DragonParser.SHIFTRIGHT, 0); }
		public Shift_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_opContext shift_op() {
		Shift_opContext _localctx = new Shift_opContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_shift_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			_la = _input.La(1);
			if ( !(_la==SHIFTLEFT || _la==SHIFTRIGHT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public Shift_opContext[] shift_op() {
			return GetRuleContexts<Shift_opContext>();
		}
		public Shift_opContext shift_op(int i) {
			return GetRuleContext<Shift_opContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; additive_expression();
			State = 539;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 534; shift_op();
					State = 535; additive_expression();
					}
					} 
				}
				State = 541;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_opContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(DragonParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DragonParser.MINUS, 0); }
		public Additive_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_opContext additive_op() {
		Additive_opContext _localctx = new Additive_opContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_additive_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public Additive_opContext[] additive_op() {
			return GetRuleContexts<Additive_opContext>();
		}
		public Additive_opContext additive_op(int i) {
			return GetRuleContext<Additive_opContext>(i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			State = 560;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544; multiplicative_expression();
				State = 548;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 545; additive_op();
						State = 546; multiplicative_expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 550;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 552; additive_op();
					}
					}
					State = 555;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==PLUS || _la==MINUS );
				State = 557; multiplicative_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 559; multiplicative_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_opContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(DragonParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(DragonParser.MODULO, 0); }
		public Multiplicative_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_opContext multiplicative_op() {
		Multiplicative_opContext _localctx = new Multiplicative_opContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_multiplicative_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			_la = _input.La(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (MULTIPLY - 67)) | (1L << (DIVIDE - 67)) | (1L << (MODULO - 67)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Multiplicative_opContext[] multiplicative_op() {
			return GetRuleContexts<Multiplicative_opContext>();
		}
		public Multiplicative_opContext multiplicative_op(int i) {
			return GetRuleContext<Multiplicative_opContext>(i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_multiplicative_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; unary_expression();
			State = 570;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 565; multiplicative_op();
					State = 566; unary_expression();
					}
					} 
				}
				State = 572;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode[] NOT() { return GetTokens(DragonParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(DragonParser.NOT, i);
		}
		public ITerminalNode[] BITWISEINVERSE() { return GetTokens(DragonParser.BITWISEINVERSE); }
		public ITerminalNode BITWISEINVERSE(int i) {
			return GetToken(DragonParser.BITWISEINVERSE, i);
		}
		public ITerminalNode TYPEOF() { return GetToken(DragonParser.TYPEOF, 0); }
		public ITerminalNode YIELD() { return GetToken(DragonParser.YIELD, 0); }
		public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		public ITerminalNode UNDEF() { return GetToken(DragonParser.UNDEF, 0); }
		public ITerminalNode STRING() { return GetToken(DragonParser.STRING, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(DragonParser.REMOVE, 0); }
		public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_unary_expression);
		try {
			int _alt;
			State = 600;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 573; Match(NOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 576;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 578; unary_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 580;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 579; Match(BITWISEINVERSE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 582;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 584; unary_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 585; Match(TYPEOF);
				State = 586; unary_expression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 587; Match(YIELD);
				State = 589;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 588; call_args();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 591; Match(UNDEF);
				State = 592; Match(STRING);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 593; Match(UNDEF);
				State = 594; symbol();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 595; Match(REMOVE);
				State = 596; Match(STRING);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 597; Match(REMOVE);
				State = 598; symbol();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 599; power_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_expressionContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode EXPONENT() { return GetToken(DragonParser.EXPONENT, 0); }
		public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		public Power_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Power_expressionContext power_expression() {
		Power_expressionContext _localctx = new Power_expressionContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_power_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; atom();
			State = 605;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPONENT) {
				{
				State = 603; Match(EXPONENT);
				State = 604; power_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_atom);
		try {
			State = 612;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607; Match(LPAREN);
				State = 608; expression();
				State = 609; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611; primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_right_side_parensContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		public Yield_blockContext yield_block() {
			return GetRuleContext<Yield_blockContext>(0);
		}
		public Primary_right_side_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_right_side_parens; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_right_side_parens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_right_side_parensContext primary_right_side_parens() {
		Primary_right_side_parensContext _localctx = new Primary_right_side_parensContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_primary_right_side_parens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(LPAREN);
			State = 616;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << COLON) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << OP) | (1L << BITWISEXOR))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (NOT - 65)) | (1L << (BITWISEINVERSE - 65)) | (1L << (TYPEOF - 65)) | (1L << (YIELD - 65)) | (1L << (UNDEF - 65)) | (1L << (STRING - 65)) | (1L << (REMOVE - 65)) | (1L << (LBRACKET - 65)) | (1L << (BRACKETS - 65)) | (1L << (NUMBER - 65)) | (1L << (INTEGER - 65)) | (1L << (NIL - 65)) | (1L << (TRUE - 65)) | (1L << (FALSE - 65)) | (1L << (SELF - 65)) | (1L << (SUPER - 65)) | (1L << (CONTEXT - 65)) | (1L << (REGEX - 65)))) != 0)) {
				{
				State = 615; call_args();
				}
			}

			State = 618; Match(RPAREN);
			State = 620;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 619; yield_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_right_side_accessContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(DragonParser.LBRACKET, 0); }
		public Call_argsContext call_args() {
			return GetRuleContext<Call_argsContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(DragonParser.RBRACKET, 0); }
		public Primary_right_side_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_right_side_access; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_right_side_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_right_side_accessContext primary_right_side_access() {
		Primary_right_side_accessContext _localctx = new Primary_right_side_accessContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_primary_right_side_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(LBRACKET);
			State = 623; call_args();
			State = 624; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_right_side_yield_blockContext : ParserRuleContext {
		public Yield_blockContext yield_block() {
			return GetRuleContext<Yield_blockContext>(0);
		}
		public Do_yield_blockContext do_yield_block() {
			return GetRuleContext<Do_yield_blockContext>(0);
		}
		public Primary_right_side_yield_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_right_side_yield_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_right_side_yield_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_right_side_yield_blockContext primary_right_side_yield_block() {
		Primary_right_side_yield_blockContext _localctx = new Primary_right_side_yield_blockContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_primary_right_side_yield_block);
		try {
			State = 628;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626; yield_block();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; do_yield_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_right_side_parens_accessContext : ParserRuleContext {
		public Primary_right_side_parensContext primary_right_side_parens() {
			return GetRuleContext<Primary_right_side_parensContext>(0);
		}
		public Primary_right_side_accessContext primary_right_side_access() {
			return GetRuleContext<Primary_right_side_accessContext>(0);
		}
		public Primary_right_side_parens_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_right_side_parens_access; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_right_side_parens_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_right_side_parens_accessContext primary_right_side_parens_access() {
		Primary_right_side_parens_accessContext _localctx = new Primary_right_side_parens_accessContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_primary_right_side_parens_access);
		try {
			State = 632;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630; primary_right_side_parens();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631; primary_right_side_access();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_function_callContext : ParserRuleContext {
		public Primary_right_side_parens_accessContext[] primary_right_side_parens_access() {
			return GetRuleContexts<Primary_right_side_parens_accessContext>();
		}
		public Primary_right_side_parens_accessContext primary_right_side_parens_access(int i) {
			return GetRuleContext<Primary_right_side_parens_accessContext>(i);
		}
		public Primary_right_side_yield_blockContext primary_right_side_yield_block() {
			return GetRuleContext<Primary_right_side_yield_blockContext>(0);
		}
		public Primary_function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_function_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_function_callContext primary_function_call() {
		Primary_function_callContext _localctx = new Primary_function_callContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_primary_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 634; primary_right_side_parens_access();
				}
				}
				State = 637;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LPAREN || _la==LBRACKET );
			State = 640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 639; primary_right_side_yield_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_left_sideContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Lvalue_instance_refContext lvalue_instance_ref() {
			return GetRuleContext<Lvalue_instance_refContext>(0);
		}
		public Lvalue_method_changeContext lvalue_method_change() {
			return GetRuleContext<Lvalue_method_changeContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public Anonymous_class_declarationContext anonymous_class_declaration() {
			return GetRuleContext<Anonymous_class_declarationContext>(0);
		}
		public Primary_left_sideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_left_side; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_left_side(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_left_sideContext primary_left_side() {
		Primary_left_sideContext _localctx = new Primary_left_sideContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_primary_left_side);
		try {
			State = 650;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643; lvalue_instance_ref();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 644; lvalue_method_change();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 645; lvalue();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 646; array();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 647; hash();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 648; anonymous_function();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 649; anonymous_class_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public Primary_left_sideContext primary_left_side() {
			return GetRuleContext<Primary_left_sideContext>(0);
		}
		public Primary_function_callContext primary_function_call() {
			return GetRuleContext<Primary_function_callContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; primary_left_side();
			State = 654;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==LBRACKET) {
				{
				State = 653; primary_function_call();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(DragonParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(DragonParser.RBRACE, 0); }
		public ITerminalNode COLON() { return GetToken(DragonParser.COLON, 0); }
		public Hash_keyContext[] hash_key() {
			return GetRuleContexts<Hash_keyContext>();
		}
		public Hash_keyContext hash_key(int i) {
			return GetRuleContext<Hash_keyContext>(i);
		}
		public ITerminalNode[] HASH() { return GetTokens(DragonParser.HASH); }
		public ITerminalNode HASH(int i) {
			return GetToken(DragonParser.HASH, i);
		}
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DragonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DragonParser.COMMA, i);
		}
		public HashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashContext hash() {
		HashContext _localctx = new HashContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_hash);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; Match(LBRACE);
			State = 672;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				{
				{
				State = 657; hash_key();
				State = 658; Match(HASH);
				State = 659; arg();
				}
				State = 668;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 661; Match(COMMA);
					State = 662; hash_key();
					State = 663; Match(HASH);
					State = 664; arg();
					}
					}
					State = 670;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				break;

			case 2:
				{
				State = 671; Match(COLON);
				}
				break;
			}
			State = 674; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_hash_keyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode STRING() { return GetToken(DragonParser.STRING, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public Single_hash_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_hash_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_hash_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_hash_keyContext single_hash_key() {
		Single_hash_keyContext _localctx = new Single_hash_keyContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_single_hash_key);
		try {
			State = 679;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 676; Match(IDENTIFIER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 677; Match(STRING);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 678; symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_keyContext : ParserRuleContext {
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public Hash_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_keyContext hash_key() {
		Hash_keyContext _localctx = new Hash_keyContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_hash_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BRACKETS() { return GetToken(DragonParser.BRACKETS, 0); }
		public ITerminalNode LBRACKET() { return GetToken(DragonParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(DragonParser.RBRACKET, 0); }
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DragonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DragonParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_array);
		int _la;
		try {
			State = 696;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BRACKETS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683; Match(BRACKETS);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684; Match(LBRACKET);
				State = 693;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << COLON) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << OP) | (1L << BITWISEXOR))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (NOT - 65)) | (1L << (BITWISEINVERSE - 65)) | (1L << (TYPEOF - 65)) | (1L << (YIELD - 65)) | (1L << (UNDEF - 65)) | (1L << (STRING - 65)) | (1L << (REMOVE - 65)) | (1L << (LBRACKET - 65)) | (1L << (BRACKETS - 65)) | (1L << (NUMBER - 65)) | (1L << (INTEGER - 65)) | (1L << (NIL - 65)) | (1L << (TRUE - 65)) | (1L << (FALSE - 65)) | (1L << (SELF - 65)) | (1L << (SUPER - 65)) | (1L << (CONTEXT - 65)) | (1L << (REGEX - 65)))) != 0)) {
					{
					State = 685; arg();
					State = 690;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 686; Match(COMMA);
						State = 687; arg();
						}
						}
						State = 692;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 695; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(DragonParser.NUMBER, 0); }
		public ITerminalNode INTEGER() { return GetToken(DragonParser.INTEGER, 0); }
		public ITerminalNode STRING() { return GetToken(DragonParser.STRING, 0); }
		public ITerminalNode REGEX() { return GetToken(DragonParser.REGEX, 0); }
		public ITerminalNode NIL() { return GetToken(DragonParser.NIL, 0); }
		public ITerminalNode TRUE() { return GetToken(DragonParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(DragonParser.FALSE, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_literal);
		try {
			State = 706;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698; Match(NUMBER);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 699; Match(INTEGER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 700; Match(STRING);
				}
				break;
			case REGEX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 701; Match(REGEX);
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 702; Match(NIL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 703; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 704; Match(FALSE);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 8);
				{
				State = 705; symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(DragonParser.COLON, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode STRING() { return GetToken(DragonParser.STRING, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_symbol);
		try {
			State = 712;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 708; Match(COLON);
				State = 709; Match(IDENTIFIER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710; Match(COLON);
				State = 711; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_lvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lvalue_instance_ref_optContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(DragonParser.CLASS, 0); }
		public Lvalue_instance_ref_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue_instance_ref_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue_instance_ref_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lvalue_instance_ref_optContext lvalue_instance_ref_opt() {
		Lvalue_instance_ref_optContext _localctx = new Lvalue_instance_ref_optContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_lvalue_instance_ref_opt);
		try {
			State = 718;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
			case INCREMENT:
			case DECREMENT:
			case OP:
			case COMPARE:
			case REGEXMATCH:
			case EQUAL:
			case LESSTHANEQUAL:
			case LESSTHAN:
			case GREATERTHANEQUAL:
			case GREATERTHAN:
			case BITWISEXOR:
			case BITWISEOR:
			case BITWISEAND:
			case SHIFTLEFT:
			case SHIFTRIGHT:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case DIVIDE:
			case MODULO:
			case EXPONENT:
			case BRACKETS:
			case IRANGE:
			case ERANGE:
			case WHENCOMP:
			case UPLUS:
			case UMINUS:
			case BRACKETSASSIGN:
			case DCOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716; function_name();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 717; Match(CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lvalue_instance_refContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(DragonParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(DragonParser.DOT, i);
		}
		public Lvalue_instance_ref_optContext[] lvalue_instance_ref_opt() {
			return GetRuleContexts<Lvalue_instance_ref_optContext>();
		}
		public Lvalue_instance_ref_optContext lvalue_instance_ref_opt(int i) {
			return GetRuleContext<Lvalue_instance_ref_optContext>(i);
		}
		public Lvalue_instance_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue_instance_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue_instance_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lvalue_instance_refContext lvalue_instance_ref() {
		Lvalue_instance_refContext _localctx = new Lvalue_instance_refContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_lvalue_instance_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; variable();
			State = 723;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 721; Match(DOT);
				State = 722; lvalue_instance_ref_opt();
				}
				}
				State = 725;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DOT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lvalue_method_changeContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(DragonParser.DOT, 0); }
		public ITerminalNode UNDEF() { return GetToken(DragonParser.UNDEF, 0); }
		public ITerminalNode STRING() { return GetToken(DragonParser.STRING, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(DragonParser.REMOVE, 0); }
		public Lvalue_method_changeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue_method_change; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue_method_change(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lvalue_method_changeContext lvalue_method_change() {
		Lvalue_method_changeContext _localctx = new Lvalue_method_changeContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_lvalue_method_change);
		try {
			State = 747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 727; variable();
				State = 728; Match(DOT);
				State = 729; Match(UNDEF);
				State = 730; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 732; variable();
				State = 733; Match(DOT);
				State = 734; Match(UNDEF);
				State = 735; symbol();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 737; variable();
				State = 738; Match(DOT);
				State = 739; Match(REMOVE);
				State = 740; Match(STRING);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 742; variable();
				State = 743; Match(DOT);
				State = 744; Match(REMOVE);
				State = 745; symbol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lvalue_accessContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode[] LBRACKET() { return GetTokens(DragonParser.LBRACKET); }
		public ITerminalNode LBRACKET(int i) {
			return GetToken(DragonParser.LBRACKET, i);
		}
		public Call_argsContext[] call_args() {
			return GetRuleContexts<Call_argsContext>();
		}
		public Call_argsContext call_args(int i) {
			return GetRuleContext<Call_argsContext>(i);
		}
		public ITerminalNode[] RBRACKET() { return GetTokens(DragonParser.RBRACKET); }
		public ITerminalNode RBRACKET(int i) {
			return GetToken(DragonParser.RBRACKET, i);
		}
		public Lvalue_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue_access; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lvalue_accessContext lvalue_access() {
		Lvalue_accessContext _localctx = new Lvalue_accessContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_lvalue_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749; variable();
			State = 754;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 750; Match(LBRACKET);
				State = 751; call_args();
				State = 752; Match(RBRACKET);
				}
				}
				State = 756;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LBRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode SELF() { return GetToken(DragonParser.SELF, 0); }
		public ITerminalNode SUPER() { return GetToken(DragonParser.SUPER, 0); }
		public ITerminalNode CONTEXT() { return GetToken(DragonParser.CONTEXT, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (SELF - 90)) | (1L << (SUPER - 90)) | (1L << (CONTEXT - 90)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_argsContext : ParserRuleContext {
		public Call_argContext[] call_arg() {
			return GetRuleContexts<Call_argContext>();
		}
		public Call_argContext call_arg(int i) {
			return GetRuleContext<Call_argContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DragonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DragonParser.COMMA, i);
		}
		public Call_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_args; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_argsContext call_args() {
		Call_argsContext _localctx = new Call_argsContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_call_args);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; call_arg();
			State = 765;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,69,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 761; Match(COMMA);
					State = 762; call_arg();
					}
					} 
				}
				State = 767;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,69,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_arg_single_hashContext : ParserRuleContext {
		public Single_hash_keyContext single_hash_key() {
			return GetRuleContext<Single_hash_keyContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(DragonParser.HASH, 0); }
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public Call_arg_single_hashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg_single_hash; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg_single_hash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_arg_single_hashContext call_arg_single_hash() {
		Call_arg_single_hashContext _localctx = new Call_arg_single_hashContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_call_arg_single_hash);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 768; single_hash_key();
			State = 769; Match(HASH);
			State = 770; arg();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_argContext : ParserRuleContext {
		public Call_arg_single_hashContext call_arg_single_hash() {
			return GetRuleContext<Call_arg_single_hashContext>(0);
		}
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(DragonParser.COLON, 0); }
		public Call_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_argContext call_arg() {
		Call_argContext _localctx = new Call_argContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_call_arg);
		try {
			State = 778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 772; call_arg_single_hash();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 775;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					State = 773; Match(IDENTIFIER);
					State = 774; Match(COLON);
					}
					break;
				}
				State = 777; arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_argContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(DragonParser.COLON, 0); }
		public ITerminalNode ASSIGN() { return GetToken(DragonParser.ASSIGN, 0); }
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public First_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirst_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public First_argContext first_arg() {
		First_argContext _localctx = new First_argContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_first_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 780; Match(COLON);
				}
			}

			State = 783; Match(IDENTIFIER);
			State = 786;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 784; Match(ASSIGN);
				State = 785; arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_var_argContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public First_var_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_var_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirst_var_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public First_var_argContext first_var_arg() {
		First_var_argContext _localctx = new First_var_argContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_first_var_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 788; Match(MULTIPLY);
			State = 789; Match(IDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_block_argContext : ParserRuleContext {
		public ITerminalNode BITWISEAND() { return GetToken(DragonParser.BITWISEAND, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public First_block_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_block_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirst_block_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public First_block_argContext first_block_arg() {
		First_block_argContext _localctx = new First_block_argContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_first_block_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 791; Match(BITWISEAND);
			State = 792; Match(IDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_var_argContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(DragonParser.COMMA, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public End_var_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_var_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd_var_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public End_var_argContext end_var_arg() {
		End_var_argContext _localctx = new End_var_argContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_end_var_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 794; Match(COMMA);
			State = 795; Match(MULTIPLY);
			State = 796; Match(IDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_block_argContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(DragonParser.COMMA, 0); }
		public ITerminalNode BITWISEAND() { return GetToken(DragonParser.BITWISEAND, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public End_block_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_block_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd_block_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public End_block_argContext end_block_arg() {
		End_block_argContext _localctx = new End_block_argContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_end_block_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 798; Match(COMMA);
			State = 799; Match(BITWISEAND);
			State = 800; Match(IDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_argContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(DragonParser.COMMA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(DragonParser.COLON, 0); }
		public ITerminalNode ASSIGN() { return GetToken(DragonParser.ASSIGN, 0); }
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public Next_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Next_argContext next_arg() {
		Next_argContext _localctx = new Next_argContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_next_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802; Match(COMMA);
			State = 804;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 803; Match(COLON);
				}
			}

			State = 806; Match(IDENTIFIER);
			State = 809;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 807; Match(ASSIGN);
				State = 808; arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_argument_list_no_parenContext : ParserRuleContext {
		public First_var_argContext first_var_arg() {
			return GetRuleContext<First_var_argContext>(0);
		}
		public First_block_argContext first_block_arg() {
			return GetRuleContext<First_block_argContext>(0);
		}
		public First_argContext first_arg() {
			return GetRuleContext<First_argContext>(0);
		}
		public Next_argContext[] next_arg() {
			return GetRuleContexts<Next_argContext>();
		}
		public Next_argContext next_arg(int i) {
			return GetRuleContext<Next_argContext>(i);
		}
		public End_var_argContext end_var_arg() {
			return GetRuleContext<End_var_argContext>(0);
		}
		public End_block_argContext end_block_arg() {
			return GetRuleContext<End_block_argContext>(0);
		}
		public Definition_argument_list_no_parenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_argument_list_no_paren; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition_argument_list_no_paren(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_argument_list_no_parenContext definition_argument_list_no_paren() {
		Definition_argument_list_no_parenContext _localctx = new Definition_argument_list_no_parenContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_definition_argument_list_no_paren);
		int _la;
		try {
			int _alt;
			State = 829;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MULTIPLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 811; first_var_arg();
				State = 813;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BITWISEAND) {
					{
					State = 812; first_block_arg();
					}
				}

				}
				break;
			case BITWISEAND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815; first_block_arg();
				}
				break;
			case COLON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 816; first_arg();
				State = 820;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 817; next_arg();
						}
						} 
					}
					State = 822;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
				}
				State = 824;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
				case 1:
					{
					State = 823; end_var_arg();
					}
					break;
				}
				State = 827;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 826; end_block_arg();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_argument_listContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public Definition_argument_list_no_parenContext definition_argument_list_no_paren() {
			return GetRuleContext<Definition_argument_list_no_parenContext>(0);
		}
		public Definition_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_argument_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_argument_listContext definition_argument_list() {
		Definition_argument_listContext _localctx = new Definition_argument_listContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_definition_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831; Match(LPAREN);
			{
			State = 833;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (COLON - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (BITWISEAND - 17)) | (1L << (MULTIPLY - 17)))) != 0)) {
				{
				State = 832; definition_argument_list_no_paren();
				}
			}

			}
			State = 835; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode IRANGE() { return GetToken(DragonParser.IRANGE, 0); }
		public ITerminalNode ERANGE() { return GetToken(DragonParser.ERANGE, 0); }
		public ITerminalNode BITWISEOR() { return GetToken(DragonParser.BITWISEOR, 0); }
		public ITerminalNode BITWISEXOR() { return GetToken(DragonParser.BITWISEXOR, 0); }
		public ITerminalNode BITWISEAND() { return GetToken(DragonParser.BITWISEAND, 0); }
		public ITerminalNode COMPARE() { return GetToken(DragonParser.COMPARE, 0); }
		public ITerminalNode EQUAL() { return GetToken(DragonParser.EQUAL, 0); }
		public ITerminalNode WHENCOMP() { return GetToken(DragonParser.WHENCOMP, 0); }
		public ITerminalNode REGEXMATCH() { return GetToken(DragonParser.REGEXMATCH, 0); }
		public ITerminalNode LESSTHAN() { return GetToken(DragonParser.LESSTHAN, 0); }
		public ITerminalNode LESSTHANEQUAL() { return GetToken(DragonParser.LESSTHANEQUAL, 0); }
		public ITerminalNode GREATERTHAN() { return GetToken(DragonParser.GREATERTHAN, 0); }
		public ITerminalNode GREATERTHANEQUAL() { return GetToken(DragonParser.GREATERTHANEQUAL, 0); }
		public ITerminalNode PLUS() { return GetToken(DragonParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DragonParser.MINUS, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(DragonParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(DragonParser.MODULO, 0); }
		public ITerminalNode EXPONENT() { return GetToken(DragonParser.EXPONENT, 0); }
		public ITerminalNode SHIFTLEFT() { return GetToken(DragonParser.SHIFTLEFT, 0); }
		public ITerminalNode SHIFTRIGHT() { return GetToken(DragonParser.SHIFTRIGHT, 0); }
		public ITerminalNode UPLUS() { return GetToken(DragonParser.UPLUS, 0); }
		public ITerminalNode UMINUS() { return GetToken(DragonParser.UMINUS, 0); }
		public ITerminalNode BRACKETS() { return GetToken(DragonParser.BRACKETS, 0); }
		public ITerminalNode BRACKETSASSIGN() { return GetToken(DragonParser.BRACKETSASSIGN, 0); }
		public ITerminalNode DCOLON() { return GetToken(DragonParser.DCOLON, 0); }
		public ITerminalNode OP() { return GetToken(DragonParser.OP, 0); }
		public ITerminalNode INCREMENT() { return GetToken(DragonParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(DragonParser.DECREMENT, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << OP) | (1L << COMPARE) | (1L << REGEXMATCH) | (1L << EQUAL) | (1L << LESSTHANEQUAL) | (1L << LESSTHAN) | (1L << GREATERTHANEQUAL) | (1L << GREATERTHAN) | (1L << BITWISEXOR) | (1L << BITWISEOR) | (1L << BITWISEAND) | (1L << SHIFTLEFT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHIFTRIGHT - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (MULTIPLY - 64)) | (1L << (DIVIDE - 64)) | (1L << (MODULO - 64)) | (1L << (EXPONENT - 64)) | (1L << (BRACKETS - 64)) | (1L << (IRANGE - 64)) | (1L << (ERANGE - 64)) | (1L << (WHENCOMP - 64)) | (1L << (UPLUS - 64)) | (1L << (UMINUS - 64)) | (1L << (BRACKETSASSIGN - 64)) | (1L << (DCOLON - 64)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		public ITerminalNode DEF() { return GetToken(DragonParser.DEF, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(DragonParser.DOT, 0); }
		public Definition_argument_listContext definition_argument_list() {
			return GetRuleContext<Definition_argument_listContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_function_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839; Match(DEF);
			State = 843;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 840; lvalue();
				State = 841; Match(DOT);
				}
				break;
			}
			State = 845; function_name();
			State = 847;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 846; definition_argument_list();
				}
			}

			State = 849; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_functionContext : ParserRuleContext {
		public ITerminalNode BITWISEXOR() { return GetToken(DragonParser.BITWISEXOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Definition_argument_listContext definition_argument_list() {
			return GetRuleContext<Definition_argument_listContext>(0);
		}
		public Anonymous_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_functionContext anonymous_function() {
		Anonymous_functionContext _localctx = new Anonymous_functionContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_anonymous_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851; Match(BITWISEXOR);
			State = 853;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 852; definition_argument_list();
				}
			}

			State = 855; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_blockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(DragonParser.LBRACE, 0); }
		public Block_contentsContext block_contents() {
			return GetRuleContext<Block_contentsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(DragonParser.RBRACE, 0); }
		public ITerminalNode[] BITWISEOR() { return GetTokens(DragonParser.BITWISEOR); }
		public ITerminalNode BITWISEOR(int i) {
			return GetToken(DragonParser.BITWISEOR, i);
		}
		public Definition_argument_list_no_parenContext definition_argument_list_no_paren() {
			return GetRuleContext<Definition_argument_list_no_parenContext>(0);
		}
		public Yield_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_blockContext yield_block() {
		Yield_blockContext _localctx = new Yield_blockContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_yield_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857; Match(LBRACE);
			State = 862;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BITWISEOR) {
				{
				State = 858; Match(BITWISEOR);
				State = 859; definition_argument_list_no_paren();
				State = 860; Match(BITWISEOR);
				}
			}

			State = 864; block_contents();
			State = 865; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_yield_blockContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(DragonParser.DO, 0); }
		public Block_contentsContext block_contents() {
			return GetRuleContext<Block_contentsContext>(0);
		}
		public ITerminalNode END() { return GetToken(DragonParser.END, 0); }
		public ITerminalNode[] BITWISEOR() { return GetTokens(DragonParser.BITWISEOR); }
		public ITerminalNode BITWISEOR(int i) {
			return GetToken(DragonParser.BITWISEOR, i);
		}
		public Definition_argument_list_no_parenContext definition_argument_list_no_paren() {
			return GetRuleContext<Definition_argument_list_no_parenContext>(0);
		}
		public Do_yield_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_yield_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_yield_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_yield_blockContext do_yield_block() {
		Do_yield_blockContext _localctx = new Do_yield_blockContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_do_yield_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; Match(DO);
			State = 872;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BITWISEOR) {
				{
				State = 868; Match(BITWISEOR);
				State = 869; definition_argument_list_no_paren();
				State = 870; Match(BITWISEOR);
				}
			}

			State = 874; block_contents();
			State = 875; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_assign_leftContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DragonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DragonParser.COMMA, i);
		}
		public Parallel_assign_left_itemContext[] parallel_assign_left_item() {
			return GetRuleContexts<Parallel_assign_left_itemContext>();
		}
		public Parallel_assign_left_itemContext parallel_assign_left_item(int i) {
			return GetRuleContext<Parallel_assign_left_itemContext>(i);
		}
		public Parallel_assign_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_assign_left; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_assign_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_assign_leftContext parallel_assign_left() {
		Parallel_assign_leftContext _localctx = new Parallel_assign_leftContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_parallel_assign_left);
		int _la;
		try {
			State = 886;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MULTIPLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 877; Match(MULTIPLY);
				State = 878; lvalue();
				}
				break;
			case IDENTIFIER:
			case SELF:
			case SUPER:
			case CONTEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 879; lvalue();
				State = 882;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 880; Match(COMMA);
					State = 881; parallel_assign_left_item();
					}
					}
					State = 884;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_assign_left_itemContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public Parallel_assign_leftContext parallel_assign_left() {
			return GetRuleContext<Parallel_assign_leftContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Parallel_assign_left_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_assign_left_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_assign_left_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_assign_left_itemContext parallel_assign_left_item() {
		Parallel_assign_left_itemContext _localctx = new Parallel_assign_left_itemContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_parallel_assign_left_item);
		try {
			State = 895;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 888; Match(LPAREN);
				State = 889; parallel_assign_left();
				State = 890; Match(RPAREN);
				}
				break;
			case MULTIPLY:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 892; Match(MULTIPLY);
				State = 893; lvalue();
				}
				}
				break;
			case IDENTIFIER:
			case SELF:
			case SUPER:
			case CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 894; lvalue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_assign_rightContext : ParserRuleContext {
		public Parallel_assign_right_itemContext[] parallel_assign_right_item() {
			return GetRuleContexts<Parallel_assign_right_itemContext>();
		}
		public Parallel_assign_right_itemContext parallel_assign_right_item(int i) {
			return GetRuleContext<Parallel_assign_right_itemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DragonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DragonParser.COMMA, i);
		}
		public Parallel_assign_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_assign_right; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_assign_right(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_assign_rightContext parallel_assign_right() {
		Parallel_assign_rightContext _localctx = new Parallel_assign_rightContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_parallel_assign_right);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897; parallel_assign_right_item();
			State = 902;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 898; Match(COMMA);
				State = 899; parallel_assign_right_item();
				}
				}
				State = 904;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_assign_right_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public Parallel_assign_right_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_assign_right_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_assign_right_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_assign_right_itemContext parallel_assign_right_item() {
		Parallel_assign_right_itemContext _localctx = new Parallel_assign_right_itemContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_parallel_assign_right_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MULTIPLY:
				{
				{
				State = 905; Match(MULTIPLY);
				State = 906; lvalue();
				}
				}
				break;
			case LBRACE:
			case COLON:
			case LPAREN:
			case IDENTIFIER:
			case SET:
			case CONST:
			case INCREMENT:
			case DECREMENT:
			case OP:
			case BITWISEXOR:
			case PLUS:
			case MINUS:
			case NOT:
			case BITWISEINVERSE:
			case TYPEOF:
			case YIELD:
			case UNDEF:
			case STRING:
			case REMOVE:
			case LBRACKET:
			case BRACKETS:
			case NUMBER:
			case INTEGER:
			case NIL:
			case TRUE:
			case FALSE:
			case SELF:
			case SUPER:
			case CONTEXT:
			case REGEX:
				{
				State = 907; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(DragonParser.ALIAS, 0); }
		public Alias_partContext[] alias_part() {
			return GetRuleContexts<Alias_partContext>();
		}
		public Alias_partContext alias_part(int i) {
			return GetRuleContext<Alias_partContext>(i);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; Match(ALIAS);
			State = 911; alias_part();
			State = 912; alias_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_partContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public Alias_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_partContext alias_part() {
		Alias_partContext _localctx = new Alias_partContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_alias_part);
		try {
			State = 916;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 914; Match(IDENTIFIER);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915; symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(DragonParser.INCLUDE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DragonParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DragonParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DCOLON() { return GetTokens(DragonParser.DCOLON); }
		public ITerminalNode DCOLON(int i) {
			return GetToken(DragonParser.DCOLON, i);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918; Match(INCLUDE);
			State = 919; Match(IDENTIFIER);
			State = 924;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DCOLON) {
				{
				{
				State = 920; Match(DCOLON);
				State = 921; Match(IDENTIFIER);
				}
				}
				State = 926;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(DragonParser.CLASS, 0); }
		public ITerminalNode LBRACE() { return GetToken(DragonParser.LBRACE, 0); }
		public Block_contentsContext block_contents() {
			return GetRuleContext<Block_contentsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(DragonParser.RBRACE, 0); }
		public ITerminalNode SHIFTLEFT() { return GetToken(DragonParser.SHIFTLEFT, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DragonParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DragonParser.IDENTIFIER, i);
		}
		public ITerminalNode LESSTHAN() { return GetToken(DragonParser.LESSTHAN, 0); }
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927; Match(CLASS);
			State = 935;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SHIFTLEFT:
				{
				{
				State = 928; Match(SHIFTLEFT);
				State = 929; primary();
				}
				}
				break;
			case IDENTIFIER:
				{
				{
				State = 930; Match(IDENTIFIER);
				State = 933;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LESSTHAN) {
					{
					State = 931; Match(LESSTHAN);
					State = 932; Match(IDENTIFIER);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 937; Match(LBRACE);
			State = 938; block_contents();
			State = 939; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_class_declarationContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(DragonParser.LBRACE, 0); }
		public Block_contentsContext block_contents() {
			return GetRuleContext<Block_contentsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(DragonParser.RBRACE, 0); }
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public ITerminalNode LESSTHAN() { return GetToken(DragonParser.LESSTHAN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public Anonymous_class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_class_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_class_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_class_declarationContext anonymous_class_declaration() {
		Anonymous_class_declarationContext _localctx = new Anonymous_class_declarationContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_anonymous_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; Match(LPAREN);
			State = 942; Match(LBRACE);
			State = 945;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LESSTHAN) {
				{
				State = 943; Match(LESSTHAN);
				State = 944; Match(IDENTIFIER);
				}
			}

			State = 947; block_contents();
			State = 948; Match(RBRACE);
			State = 949; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_declarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(DragonParser.MODULE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACE() { return GetToken(DragonParser.LBRACE, 0); }
		public Block_contentsContext block_contents() {
			return GetRuleContext<Block_contentsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(DragonParser.RBRACE, 0); }
		public Module_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_declarationContext module_declaration() {
		Module_declarationContext _localctx = new Module_declarationContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_module_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951; Match(MODULE);
			State = 952; Match(IDENTIFIER);
			State = 953; Match(LBRACE);
			State = 954; block_contents();
			State = 955; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_constructContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(DragonParser.BEGIN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Rescue_blockContext[] rescue_block() {
			return GetRuleContexts<Rescue_blockContext>();
		}
		public Rescue_blockContext rescue_block(int i) {
			return GetRuleContext<Rescue_blockContext>(i);
		}
		public Rescue_else_blockContext rescue_else_block() {
			return GetRuleContext<Rescue_else_blockContext>(0);
		}
		public Rescue_ensure_blockContext rescue_ensure_block() {
			return GetRuleContext<Rescue_ensure_blockContext>(0);
		}
		public Begin_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_constructContext begin_construct() {
		Begin_constructContext _localctx = new Begin_constructContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_begin_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(BEGIN);
			State = 958; block();
			State = 962;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==RESCUE) {
				{
				{
				State = 959; rescue_block();
				}
				}
				State = 964;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 966;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 965; rescue_else_block();
				}
			}

			State = 969;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENSURE) {
				{
				State = 968; rescue_ensure_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rescue_blockContext : ParserRuleContext {
		public ITerminalNode RESCUE() { return GetToken(DragonParser.RESCUE, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(DragonParser.MULTIPLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(DragonParser.HASH, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Rescue_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rescue_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRescue_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rescue_blockContext rescue_block() {
		Rescue_blockContext _localctx = new Rescue_blockContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_rescue_block);
		int _la;
		try {
			State = 987;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971; Match(RESCUE);
				State = 972; Match(MULTIPLY);
				State = 975;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==HASH) {
					{
					State = 973; Match(HASH);
					State = 974; Match(IDENTIFIER);
					}
				}

				State = 977; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 978; Match(RESCUE);
				State = 984;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IDENTIFIER) {
					{
					State = 979; identifiers();
					State = 982;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==HASH) {
						{
						State = 980; Match(HASH);
						State = 981; Match(IDENTIFIER);
						}
					}

					}
				}

				State = 986; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rescue_else_blockContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(DragonParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Rescue_else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rescue_else_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRescue_else_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rescue_else_blockContext rescue_else_block() {
		Rescue_else_blockContext _localctx = new Rescue_else_blockContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_rescue_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; Match(ELSE);
			State = 990; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rescue_ensure_blockContext : ParserRuleContext {
		public ITerminalNode ENSURE() { return GetToken(DragonParser.ENSURE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Rescue_ensure_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rescue_ensure_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRescue_ensure_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rescue_ensure_blockContext rescue_ensure_block() {
		Rescue_ensure_blockContext _localctx = new Rescue_ensure_blockContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_rescue_ensure_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992; Match(ENSURE);
			State = 993; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DragonParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DragonParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DragonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DragonParser.COMMA, i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995; Match(IDENTIFIER);
			State = 1000;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 996; Match(COMMA);
				State = 997; Match(IDENTIFIER);
				}
				}
				State = 1002;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sync_constructContext : ParserRuleContext {
		public ITerminalNode SYNC() { return GetToken(DragonParser.SYNC, 0); }
		public ITerminalNode LPAREN() { return GetToken(DragonParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DragonParser.IDENTIFIER, 0); }
		public ITerminalNode RPAREN() { return GetToken(DragonParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Sync_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sync_construct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDragonParserVisitor<TResult> typedVisitor = visitor as IDragonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSync_construct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sync_constructContext sync_construct() {
		Sync_constructContext _localctx = new Sync_constructContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_sync_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003; Match(SYNC);
			State = 1004; Match(LPAREN);
			State = 1005; Match(IDENTIFIER);
			State = 1006; Match(RPAREN);
			State = 1007; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3p\x3F4\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x3\x2\x3\x2\a\x2\xD3\n\x2\f\x2\xE\x2\xD6\v\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x5\x2\xDD\n\x2\x3\x3\x3\x3\a\x3\xE1\n\x3\f\x3\xE\x3\xE4"+
		"\v\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6\xED\n\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x5\a\x103\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x121\n\b\x3\t\x3\t\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x3\n\x5\n\x12B\n\n\x3\n\x6\n\x12E\n\n\r\n\xE\n\x12F"+
		"\x3\n\x5\n\x133\n\n\x3\n\x5\n\x136\n\n\x3\n\x5\n\x139\n\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\a\v\x141\n\v\f\v\xE\v\x144\v\v\x3\v\x3\v\x3\v\x5\v\x149"+
		"\n\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x15B\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\x168\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x5\x12\x172\n\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x17D\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x183\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x18B\n\x16\x3\x17\x3\x17\x5\x17\x18F\n\x17\x3"+
		"\x18\x3\x18\x5\x18\x193\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x199"+
		"\n\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x19E\n\x1A\x3\x1A\x3\x1A\x3\x1B\x5"+
		"\x1B\x1A3\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x1A8\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\x1AF\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1BA\n\x1E\x3\x1F\x3\x1F\x3\x1F\a"+
		"\x1F\x1BF\n\x1F\f\x1F\xE\x1F\x1C2\v\x1F\x3 \x3 \x3!\x3!\x3!\x3!\a!\x1CA"+
		"\n!\f!\xE!\x1CD\v!\x3\"\x3\"\x3\"\a\"\x1D2\n\"\f\"\xE\"\x1D5\v\"\x3#\x3"+
		"#\x3#\a#\x1DA\n#\f#\xE#\x1DD\v#\x3$\x3$\x3$\a$\x1E2\n$\f$\xE$\x1E5\v$"+
		"\x3%\x3%\x3&\x3&\x3&\x3&\x5&\x1ED\n&\x3\'\x3\'\x3\'\x3\'\a\'\x1F3\n\'"+
		"\f\'\xE\'\x1F6\v\'\x3(\x3(\x3)\x3)\x3)\x3)\a)\x1FE\n)\f)\xE)\x201\v)\x3"+
		"*\x3*\x3+\x3+\x3+\x3+\a+\x209\n+\f+\xE+\x20C\v+\x3,\x3,\x3,\a,\x211\n"+
		",\f,\xE,\x214\v,\x3-\x3-\x3.\x3.\x3.\x3.\a.\x21C\n.\f.\xE.\x21F\v.\x3"+
		"/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x6\x30\x227\n\x30\r\x30\xE\x30\x228"+
		"\x3\x30\x6\x30\x22C\n\x30\r\x30\xE\x30\x22D\x3\x30\x3\x30\x3\x30\x5\x30"+
		"\x233\n\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x23B\n\x32"+
		"\f\x32\xE\x32\x23E\v\x32\x3\x33\x6\x33\x241\n\x33\r\x33\xE\x33\x242\x3"+
		"\x33\x3\x33\x6\x33\x247\n\x33\r\x33\xE\x33\x248\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x5\x33\x250\n\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x25B\n\x33\x3\x34\x3\x34\x3\x34\x5\x34\x260"+
		"\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x267\n\x35\x3\x36\x3"+
		"\x36\x5\x36\x26B\n\x36\x3\x36\x3\x36\x5\x36\x26F\n\x36\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x38\x3\x38\x5\x38\x277\n\x38\x3\x39\x3\x39\x5\x39\x27B"+
		"\n\x39\x3:\x6:\x27E\n:\r:\xE:\x27F\x3:\x5:\x283\n:\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3;\x3;\x5;\x28D\n;\x3<\x3<\x5<\x291\n<\x3=\x3=\x3=\x3=\x3=\x3="+
		"\x3=\x3=\x3=\x3=\a=\x29D\n=\f=\xE=\x2A0\v=\x3=\x5=\x2A3\n=\x3=\x3=\x3"+
		">\x3>\x3>\x5>\x2AA\n>\x3?\x3?\x3@\x3@\x3@\x3@\x3@\a@\x2B3\n@\f@\xE@\x2B6"+
		"\v@\x5@\x2B8\n@\x3@\x5@\x2BB\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x5\x41\x2C5\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42"+
		"\x2CB\n\x42\x3\x43\x3\x43\x3\x44\x3\x44\x5\x44\x2D1\n\x44\x3\x45\x3\x45"+
		"\x3\x45\x6\x45\x2D6\n\x45\r\x45\xE\x45\x2D7\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2EE\n\x46\x3G\x3G\x3"+
		"G\x3G\x3G\x6G\x2F5\nG\rG\xEG\x2F6\x3H\x3H\x3I\x3I\x3I\aI\x2FE\nI\fI\xE"+
		"I\x301\vI\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x5K\x30A\nK\x3K\x5K\x30D\nK\x3L"+
		"\x5L\x310\nL\x3L\x3L\x3L\x5L\x315\nL\x3M\x3M\x3M\x3N\x3N\x3N\x3O\x3O\x3"+
		"O\x3O\x3P\x3P\x3P\x3P\x3Q\x3Q\x5Q\x327\nQ\x3Q\x3Q\x3Q\x5Q\x32C\nQ\x3R"+
		"\x3R\x5R\x330\nR\x3R\x3R\x3R\aR\x335\nR\fR\xER\x338\vR\x3R\x5R\x33B\n"+
		"R\x3R\x5R\x33E\nR\x5R\x340\nR\x3S\x3S\x5S\x344\nS\x3S\x3S\x3T\x3T\x3U"+
		"\x3U\x3U\x3U\x5U\x34E\nU\x3U\x3U\x5U\x352\nU\x3U\x3U\x3V\x3V\x5V\x358"+
		"\nV\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x5W\x361\nW\x3W\x3W\x3W\x3X\x3X\x3X\x3"+
		"X\x3X\x5X\x36B\nX\x3X\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x6Y\x375\nY\rY\xEY\x376"+
		"\x5Y\x379\nY\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x5Z\x382\nZ\x3[\x3[\x3[\a[\x387"+
		"\n[\f[\xE[\x38A\v[\x3\\\x3\\\x3\\\x5\\\x38F\n\\\x3]\x3]\x3]\x3]\x3^\x3"+
		"^\x5^\x397\n^\x3_\x3_\x3_\x3_\a_\x39D\n_\f_\xE_\x3A0\v_\x3`\x3`\x3`\x3"+
		"`\x3`\x3`\x5`\x3A8\n`\x5`\x3AA\n`\x3`\x3`\x3`\x3`\x3\x61\x3\x61\x3\x61"+
		"\x3\x61\x5\x61\x3B4\n\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3"+
		"\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\a\x63\x3C3\n\x63\f\x63"+
		"\xE\x63\x3C6\v\x63\x3\x63\x5\x63\x3C9\n\x63\x3\x63\x5\x63\x3CC\n\x63\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x5\x64\x3D2\n\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x5\x64\x3D9\n\x64\x5\x64\x3DB\n\x64\x3\x64\x5\x64\x3DE\n\x64\x3"+
		"\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x3g\x3g\x3g\ag\x3E9\ng\fg\xEg"+
		"\x3EC\vg\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x2\x2\x2i\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\x2\xF\x3\x2\x3\x4\x3\x2-.\x3\x2\x1E\x1F\x4\x2\n"+
		"\n ,\x3\x2\x30\x31\x3\x2\x38\x39\x3\x2:=\x3\x2>?\x3\x2\x41\x42\x3\x2\x43"+
		"\x44\x3\x2\x45G\x4\x2\x18\x18\\^\n\x2\x18\x18-/\x35\x36\x38\x38:GOOTT"+
		"_\x65\x42F\x2\xDC\x3\x2\x2\x2\x4\xE2\x3\x2\x2\x2\x6\xE5\x3\x2\x2\x2\b"+
		"\xE7\x3\x2\x2\x2\n\xEC\x3\x2\x2\x2\f\x102\x3\x2\x2\x2\xE\x120\x3\x2\x2"+
		"\x2\x10\x122\x3\x2\x2\x2\x12\x126\x3\x2\x2\x2\x14\x13C\x3\x2\x2\x2\x16"+
		"\x14A\x3\x2\x2\x2\x18\x14E\x3\x2\x2\x2\x1A\x151\x3\x2\x2\x2\x1C\x15C\x3"+
		"\x2\x2\x2\x1E\x164\x3\x2\x2\x2 \x169\x3\x2\x2\x2\"\x16E\x3\x2\x2\x2$\x173"+
		"\x3\x2\x2\x2&\x178\x3\x2\x2\x2(\x17E\x3\x2\x2\x2*\x18A\x3\x2\x2\x2,\x18C"+
		"\x3\x2\x2\x2.\x192\x3\x2\x2\x2\x30\x194\x3\x2\x2\x2\x32\x19D\x3\x2\x2"+
		"\x2\x34\x1AE\x3\x2\x2\x2\x36\x1B0\x3\x2\x2\x2\x38\x1B3\x3\x2\x2\x2:\x1B9"+
		"\x3\x2\x2\x2<\x1BB\x3\x2\x2\x2>\x1C3\x3\x2\x2\x2@\x1C5\x3\x2\x2\x2\x42"+
		"\x1CE\x3\x2\x2\x2\x44\x1D6\x3\x2\x2\x2\x46\x1DE\x3\x2\x2\x2H\x1E6\x3\x2"+
		"\x2\x2J\x1EC\x3\x2\x2\x2L\x1EE\x3\x2\x2\x2N\x1F7\x3\x2\x2\x2P\x1F9\x3"+
		"\x2\x2\x2R\x202\x3\x2\x2\x2T\x204\x3\x2\x2\x2V\x20D\x3\x2\x2\x2X\x215"+
		"\x3\x2\x2\x2Z\x217\x3\x2\x2\x2\\\x220\x3\x2\x2\x2^\x232\x3\x2\x2\x2`\x234"+
		"\x3\x2\x2\x2\x62\x236\x3\x2\x2\x2\x64\x25A\x3\x2\x2\x2\x66\x25C\x3\x2"+
		"\x2\x2h\x266\x3\x2\x2\x2j\x268\x3\x2\x2\x2l\x270\x3\x2\x2\x2n\x276\x3"+
		"\x2\x2\x2p\x27A\x3\x2\x2\x2r\x27D\x3\x2\x2\x2t\x28C\x3\x2\x2\x2v\x28E"+
		"\x3\x2\x2\x2x\x292\x3\x2\x2\x2z\x2A9\x3\x2\x2\x2|\x2AB\x3\x2\x2\x2~\x2BA"+
		"\x3\x2\x2\x2\x80\x2C4\x3\x2\x2\x2\x82\x2CA\x3\x2\x2\x2\x84\x2CC\x3\x2"+
		"\x2\x2\x86\x2D0\x3\x2\x2\x2\x88\x2D2\x3\x2\x2\x2\x8A\x2ED\x3\x2\x2\x2"+
		"\x8C\x2EF\x3\x2\x2\x2\x8E\x2F8\x3\x2\x2\x2\x90\x2FA\x3\x2\x2\x2\x92\x302"+
		"\x3\x2\x2\x2\x94\x30C\x3\x2\x2\x2\x96\x30F\x3\x2\x2\x2\x98\x316\x3\x2"+
		"\x2\x2\x9A\x319\x3\x2\x2\x2\x9C\x31C\x3\x2\x2\x2\x9E\x320\x3\x2\x2\x2"+
		"\xA0\x324\x3\x2\x2\x2\xA2\x33F\x3\x2\x2\x2\xA4\x341\x3\x2\x2\x2\xA6\x347"+
		"\x3\x2\x2\x2\xA8\x349\x3\x2\x2\x2\xAA\x355\x3\x2\x2\x2\xAC\x35B\x3\x2"+
		"\x2\x2\xAE\x365\x3\x2\x2\x2\xB0\x378\x3\x2\x2\x2\xB2\x381\x3\x2\x2\x2"+
		"\xB4\x383\x3\x2\x2\x2\xB6\x38E\x3\x2\x2\x2\xB8\x390\x3\x2\x2\x2\xBA\x396"+
		"\x3\x2\x2\x2\xBC\x398\x3\x2\x2\x2\xBE\x3A1\x3\x2\x2\x2\xC0\x3AF\x3\x2"+
		"\x2\x2\xC2\x3B9\x3\x2\x2\x2\xC4\x3BF\x3\x2\x2\x2\xC6\x3DD\x3\x2\x2\x2"+
		"\xC8\x3DF\x3\x2\x2\x2\xCA\x3E2\x3\x2\x2\x2\xCC\x3E5\x3\x2\x2\x2\xCE\x3ED"+
		"\x3\x2\x2\x2\xD0\xD4\x5\x4\x3\x2\xD1\xD3\x5\x6\x4\x2\xD2\xD1\x3\x2\x2"+
		"\x2\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD7"+
		"\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD7\xD8\a\x2\x2\x3\xD8\xDD\x3\x2\x2\x2"+
		"\xD9\xDA\x5\n\x6\x2\xDA\xDB\a\x2\x2\x3\xDB\xDD\x3\x2\x2\x2\xDC\xD0\x3"+
		"\x2\x2\x2\xDC\xD9\x3\x2\x2\x2\xDD\x3\x3\x2\x2\x2\xDE\xE1\x5\b\x5\x2\xDF"+
		"\xE1\x5\x6\x4\x2\xE0\xDE\x3\x2\x2\x2\xE0\xDF\x3\x2\x2\x2\xE1\xE4\x3\x2"+
		"\x2\x2\xE2\xE0\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\x5\x3\x2\x2\x2\xE4"+
		"\xE2\x3\x2\x2\x2\xE5\xE6\t\x2\x2\x2\xE6\a\x3\x2\x2\x2\xE7\xE8\x5\n\x6"+
		"\x2\xE8\xE9\x5\x6\x4\x2\xE9\t\x3\x2\x2\x2\xEA\xED\x5\f\a\x2\xEB\xED\x5"+
		"\xE\b\x2\xEC\xEA\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED\v\x3\x2\x2\x2\xEE"+
		"\xEF\x5\xE\b\x2\xEF\xF0\a\x5\x2\x2\xF0\xF1\x5.\x18\x2\xF1\x103\x3\x2\x2"+
		"\x2\xF2\xF3\x5\xE\b\x2\xF3\xF4\a\x6\x2\x2\xF4\xF5\x5.\x18\x2\xF5\x103"+
		"\x3\x2\x2\x2\xF6\xF7\x5\xE\b\x2\xF7\xF8\a\a\x2\x2\xF8\xF9\x5.\x18\x2\xF9"+
		"\x103\x3\x2\x2\x2\xFA\xFB\x5\xE\b\x2\xFB\xFC\a\b\x2\x2\xFC\xFD\x5.\x18"+
		"\x2\xFD\x103\x3\x2\x2\x2\xFE\xFF\x5\xE\b\x2\xFF\x100\a\t\x2\x2\x100\x101"+
		"\x5x=\x2\x101\x103\x3\x2\x2\x2\x102\xEE\x3\x2\x2\x2\x102\xF2\x3\x2\x2"+
		"\x2\x102\xF6\x3\x2\x2\x2\x102\xFA\x3\x2\x2\x2\x102\xFE\x3\x2\x2\x2\x103"+
		"\r\x3\x2\x2\x2\x104\x105\x5\xB0Y\x2\x105\x106\a\n\x2\x2\x106\x107\x5\xB4"+
		"[\x2\x107\x121\x3\x2\x2\x2\x108\x121\x5\x18\r\x2\x109\x121\x5\xBE`\x2"+
		"\x10A\x121\x5\xC2\x62\x2\x10B\x121\x5\x12\n\x2\x10C\x121\x5\x1A\xE\x2"+
		"\x10D\x121\x5\x1C\xF\x2\x10E\x121\x5\x1E\x10\x2\x10F\x121\x5 \x11\x2\x110"+
		"\x121\x5\"\x12\x2\x111\x121\x5$\x13\x2\x112\x121\x5&\x14\x2\x113\x121"+
		"\x5(\x15\x2\x114\x121\x5\xC4\x63\x2\x115\x121\x5\xCEh\x2\x116\x121\x5"+
		"\xB8]\x2\x117\x121\x5\xBC_\x2\x118\x121\a\v\x2\x2\x119\x121\a\f\x2\x2"+
		"\x11A\x121\a\r\x2\x2\x11B\x11C\a\xE\x2\x2\x11C\x121\x5.\x18\x2\x11D\x121"+
		"\x5,\x17\x2\x11E\x121\x5\xA8U\x2\x11F\x121\x5.\x18\x2\x120\x104\x3\x2"+
		"\x2\x2\x120\x108\x3\x2\x2\x2\x120\x109\x3\x2\x2\x2\x120\x10A\x3\x2\x2"+
		"\x2\x120\x10B\x3\x2\x2\x2\x120\x10C\x3\x2\x2\x2\x120\x10D\x3\x2\x2\x2"+
		"\x120\x10E\x3\x2\x2\x2\x120\x10F\x3\x2\x2\x2\x120\x110\x3\x2\x2\x2\x120"+
		"\x111\x3\x2\x2\x2\x120\x112\x3\x2\x2\x2\x120\x113\x3\x2\x2\x2\x120\x114"+
		"\x3\x2\x2\x2\x120\x115\x3\x2\x2\x2\x120\x116\x3\x2\x2\x2\x120\x117\x3"+
		"\x2\x2\x2\x120\x118\x3\x2\x2\x2\x120\x119\x3\x2\x2\x2\x120\x11A\x3\x2"+
		"\x2\x2\x120\x11B\x3\x2\x2\x2\x120\x11D\x3\x2\x2\x2\x120\x11E\x3\x2\x2"+
		"\x2\x120\x11F\x3\x2\x2\x2\x121\xF\x3\x2\x2\x2\x122\x123\a\xF\x2\x2\x123"+
		"\x124\x5\x4\x3\x2\x124\x125\a\x10\x2\x2\x125\x11\x3\x2\x2\x2\x126\x127"+
		"\a\x11\x2\x2\x127\x128\x5.\x18\x2\x128\x12A\a\xF\x2\x2\x129\x12B\x5\x6"+
		"\x4\x2\x12A\x129\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2"+
		"\x2\x12C\x12E\x5\x14\v\x2\x12D\x12C\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2"+
		"\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x132\x3\x2\x2\x2\x131"+
		"\x133\x5\x6\x4\x2\x132\x131\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135"+
		"\x3\x2\x2\x2\x134\x136\x5\x16\f\x2\x135\x134\x3\x2\x2\x2\x135\x136\x3"+
		"\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x139\x5\x6\x4\x2\x138\x137\x3\x2"+
		"\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\a\x10\x2"+
		"\x2\x13B\x13\x3\x2\x2\x2\x13C\x13D\a\x12\x2\x2\x13D\x142\x5.\x18\x2\x13E"+
		"\x13F\aS\x2\x2\x13F\x141\x5.\x18\x2\x140\x13E\x3\x2\x2\x2\x141\x144\x3"+
		"\x2\x2\x2\x142\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x145\x3\x2"+
		"\x2\x2\x144\x142\x3\x2\x2\x2\x145\x146\a\x13\x2\x2\x146\x148\x5\x10\t"+
		"\x2\x147\x149\x5\x6\x4\x2\x148\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2"+
		"\x149\x15\x3\x2\x2\x2\x14A\x14B\a\x14\x2\x2\x14B\x14C\a\x13\x2\x2\x14C"+
		"\x14D\x5\x10\t\x2\x14D\x17\x3\x2\x2\x2\x14E\x14F\a\x15\x2\x2\x14F\x150"+
		"\x5\x10\t\x2\x150\x19\x3\x2\x2\x2\x151\x152\a\x16\x2\x2\x152\x153\a\x17"+
		"\x2\x2\x153\x154\x5.\x18\x2\x154\x155\a\x4\x2\x2\x155\x156\x5.\x18\x2"+
		"\x156\x157\a\x4\x2\x2\x157\x158\x5.\x18\x2\x158\x15A\a\x1A\x2\x2\x159"+
		"\x15B\x5\x10\t\x2\x15A\x159\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x1B"+
		"\x3\x2\x2\x2\x15C\x15D\a\x16\x2\x2\x15D\x15E\a\x17\x2\x2\x15E\x15F\a\x18"+
		"\x2\x2\x15F\x160\a\x19\x2\x2\x160\x161\x5.\x18\x2\x161\x162\a\x1A\x2\x2"+
		"\x162\x163\x5\x10\t\x2\x163\x1D\x3\x2\x2\x2\x164\x165\a\b\x2\x2\x165\x167"+
		"\x5.\x18\x2\x166\x168\x5\x10\t\x2\x167\x166\x3\x2\x2\x2\x167\x168\x3\x2"+
		"\x2\x2\x168\x1F\x3\x2\x2\x2\x169\x16A\a\x1B\x2\x2\x16A\x16B\x5\x10\t\x2"+
		"\x16B\x16C\a\b\x2\x2\x16C\x16D\x5.\x18\x2\x16D!\x3\x2\x2\x2\x16E\x16F"+
		"\a\x6\x2\x2\x16F\x171\x5.\x18\x2\x170\x172\x5\x10\t\x2\x171\x170\x3\x2"+
		"\x2\x2\x171\x172\x3\x2\x2\x2\x172#\x3\x2\x2\x2\x173\x174\a\x1B\x2\x2\x174"+
		"\x175\x5\x10\t\x2\x175\x176\a\x6\x2\x2\x176\x177\x5.\x18\x2\x177%\x3\x2"+
		"\x2\x2\x178\x179\a\a\x2\x2\x179\x17A\x5.\x18\x2\x17A\x17C\x5\x10\t\x2"+
		"\x17B\x17D\x5*\x16\x2\x17C\x17B\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D"+
		"\'\x3\x2\x2\x2\x17E\x17F\a\x5\x2\x2\x17F\x180\x5.\x18\x2\x180\x182\x5"+
		"\x10\t\x2\x181\x183\x5*\x16\x2\x182\x181\x3\x2\x2\x2\x182\x183\x3\x2\x2"+
		"\x2\x183)\x3\x2\x2\x2\x184\x185\a\x1C\x2\x2\x185\x18B\x5(\x15\x2\x186"+
		"\x187\a\x1C\x2\x2\x187\x18B\x5&\x14\x2\x188\x189\a\x1C\x2\x2\x189\x18B"+
		"\x5\x10\t\x2\x18A\x184\x3\x2\x2\x2\x18A\x186\x3\x2\x2\x2\x18A\x188\x3"+
		"\x2\x2\x2\x18B+\x3\x2\x2\x2\x18C\x18E\a\x1D\x2\x2\x18D\x18F\x5\x90I\x2"+
		"\x18E\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F-\x3\x2\x2\x2\x190\x193"+
		"\x5\x34\x1B\x2\x191\x193\x5:\x1E\x2\x192\x190\x3\x2\x2\x2\x192\x191\x3"+
		"\x2\x2\x2\x193/\x3\x2\x2\x2\x194\x198\t\x3\x2\x2\x195\x199\x5\x8CG\x2"+
		"\x196\x199\x5\x88\x45\x2\x197\x199\x5\x84\x43\x2\x198\x195\x3\x2\x2\x2"+
		"\x198\x196\x3\x2\x2\x2\x198\x197\x3\x2\x2\x2\x199\x31\x3\x2\x2\x2\x19A"+
		"\x19E\x5\x8CG\x2\x19B\x19E\x5\x88\x45\x2\x19C\x19E\x5\x84\x43\x2\x19D"+
		"\x19A\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19C\x3\x2\x2\x2\x19E\x19F"+
		"\x3\x2\x2\x2\x19F\x1A0\t\x3\x2\x2\x1A0\x33\x3\x2\x2\x2\x1A1\x1A3\t\x4"+
		"\x2\x2\x1A2\x1A1\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A7\x3\x2\x2"+
		"\x2\x1A4\x1A8\x5\x8CG\x2\x1A5\x1A8\x5\x88\x45\x2\x1A6\x1A8\x5\x84\x43"+
		"\x2\x1A7\x1A4\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A6\x3\x2\x2\x2"+
		"\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AA\t\x5\x2\x2\x1AA\x1AB\x5.\x18\x2\x1AB"+
		"\x1AF\x3\x2\x2\x2\x1AC\x1AF\x5\x30\x19\x2\x1AD\x1AF\x5\x32\x1A\x2\x1AE"+
		"\x1A2\x3\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AD\x3\x2\x2\x2\x1AF\x35"+
		"\x3\x2\x2\x2\x1B0\x1B1\a/\x2\x2\x1B1\x1B2\x5<\x1F\x2\x1B2\x37\x3\x2\x2"+
		"\x2\x1B3\x1B4\x5<\x1F\x2\x1B4\x1B5\a/\x2\x2\x1B5\x39\x3\x2\x2\x2\x1B6"+
		"\x1BA\x5\x36\x1C\x2\x1B7\x1BA\x5\x38\x1D\x2\x1B8\x1BA\x5<\x1F\x2\x1B9"+
		"\x1B6\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1B8\x3\x2\x2\x2\x1BA;\x3"+
		"\x2\x2\x2\x1BB\x1C0\x5@!\x2\x1BC\x1BD\a/\x2\x2\x1BD\x1BF\x5@!\x2\x1BE"+
		"\x1BC\x3\x2\x2\x2\x1BF\x1C2\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1"+
		"\x3\x2\x2\x2\x1C1=\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C4\t\x6\x2"+
		"\x2\x1C4?\x3\x2\x2\x2\x1C5\x1CB\x5\x42\"\x2\x1C6\x1C7\x5> \x2\x1C7\x1C8"+
		"\x5\x42\"\x2\x1C8\x1CA\x3\x2\x2\x2\x1C9\x1C6\x3\x2\x2\x2\x1CA\x1CD\x3"+
		"\x2\x2\x2\x1CB\x1C9\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x41\x3\x2\x2"+
		"\x2\x1CD\x1CB\x3\x2\x2\x2\x1CE\x1D3\x5\x44#\x2\x1CF\x1D0\a\x32\x2\x2\x1D0"+
		"\x1D2\x5\x44#\x2\x1D1\x1CF\x3\x2\x2\x2\x1D2\x1D5\x3\x2\x2\x2\x1D3\x1D1"+
		"\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x43\x3\x2\x2\x2\x1D5\x1D3\x3\x2"+
		"\x2\x2\x1D6\x1DB\x5\x46$\x2\x1D7\x1D8\a\x33\x2\x2\x1D8\x1DA\x5\x46$\x2"+
		"\x1D9\x1D7\x3\x2\x2\x2\x1DA\x1DD\x3\x2\x2\x2\x1DB\x1D9\x3\x2\x2\x2\x1DB"+
		"\x1DC\x3\x2\x2\x2\x1DC\x45\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DE\x1E3"+
		"\x5L\'\x2\x1DF\x1E0\a\x34\x2\x2\x1E0\x1E2\x5L\'\x2\x1E1\x1DF\x3\x2\x2"+
		"\x2\x1E2\x1E5\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2"+
		"\x1E4G\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E6\x1E7\t\a\x2\x2\x1E7I\x3"+
		"\x2\x2\x2\x1E8\x1ED\a\x35\x2\x2\x1E9\x1ED\a\x36\x2\x2\x1EA\x1ED\a\x37"+
		"\x2\x2\x1EB\x1ED\x5H%\x2\x1EC\x1E8\x3\x2\x2\x2\x1EC\x1E9\x3\x2\x2\x2\x1EC"+
		"\x1EA\x3\x2\x2\x2\x1EC\x1EB\x3\x2\x2\x2\x1EDK\x3\x2\x2\x2\x1EE\x1F4\x5"+
		"P)\x2\x1EF\x1F0\x5J&\x2\x1F0\x1F1\x5P)\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2\x1EF"+
		"\x3\x2\x2\x2\x1F3\x1F6\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F5\x3"+
		"\x2\x2\x2\x1F5M\x3\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7\x1F8\t\b\x2\x2"+
		"\x1F8O\x3\x2\x2\x2\x1F9\x1FF\x5T+\x2\x1FA\x1FB\x5N(\x2\x1FB\x1FC\x5T+"+
		"\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1FA\x3\x2\x2\x2\x1FE\x201\x3\x2\x2\x2"+
		"\x1FF\x1FD\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200Q\x3\x2\x2\x2\x201\x1FF"+
		"\x3\x2\x2\x2\x202\x203\t\t\x2\x2\x203S\x3\x2\x2\x2\x204\x20A\x5V,\x2\x205"+
		"\x206\x5R*\x2\x206\x207\x5V,\x2\x207\x209\x3\x2\x2\x2\x208\x205\x3\x2"+
		"\x2\x2\x209\x20C\x3\x2\x2\x2\x20A\x208\x3\x2\x2\x2\x20A\x20B\x3\x2\x2"+
		"\x2\x20BU\x3\x2\x2\x2\x20C\x20A\x3\x2\x2\x2\x20D\x212\x5Z.\x2\x20E\x20F"+
		"\a@\x2\x2\x20F\x211\x5Z.\x2\x210\x20E\x3\x2\x2\x2\x211\x214\x3\x2\x2\x2"+
		"\x212\x210\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213W\x3\x2\x2\x2\x214\x212"+
		"\x3\x2\x2\x2\x215\x216\t\n\x2\x2\x216Y\x3\x2\x2\x2\x217\x21D\x5^\x30\x2"+
		"\x218\x219\x5X-\x2\x219\x21A\x5^\x30\x2\x21A\x21C\x3\x2\x2\x2\x21B\x218"+
		"\x3\x2\x2\x2\x21C\x21F\x3\x2\x2\x2\x21D\x21B\x3\x2\x2\x2\x21D\x21E\x3"+
		"\x2\x2\x2\x21E[\x3\x2\x2\x2\x21F\x21D\x3\x2\x2\x2\x220\x221\t\v\x2\x2"+
		"\x221]\x3\x2\x2\x2\x222\x226\x5\x62\x32\x2\x223\x224\x5\\/\x2\x224\x225"+
		"\x5\x62\x32\x2\x225\x227\x3\x2\x2\x2\x226\x223\x3\x2\x2\x2\x227\x228\x3"+
		"\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229\x233\x3\x2"+
		"\x2\x2\x22A\x22C\x5\\/\x2\x22B\x22A\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2"+
		"\x22D\x22B\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F"+
		"\x230\x5\x62\x32\x2\x230\x233\x3\x2\x2\x2\x231\x233\x5\x62\x32\x2\x232"+
		"\x222\x3\x2\x2\x2\x232\x22B\x3\x2\x2\x2\x232\x231\x3\x2\x2\x2\x233_\x3"+
		"\x2\x2\x2\x234\x235\t\f\x2\x2\x235\x61\x3\x2\x2\x2\x236\x23C\x5\x64\x33"+
		"\x2\x237\x238\x5`\x31\x2\x238\x239\x5\x64\x33\x2\x239\x23B\x3\x2\x2\x2"+
		"\x23A\x237\x3\x2\x2\x2\x23B\x23E\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2\x23C"+
		"\x23D\x3\x2\x2\x2\x23D\x63\x3\x2\x2\x2\x23E\x23C\x3\x2\x2\x2\x23F\x241"+
		"\aH\x2\x2\x240\x23F\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x240\x3\x2"+
		"\x2\x2\x242\x243\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244\x25B\x5\x64\x33"+
		"\x2\x245\x247\aI\x2\x2\x246\x245\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248"+
		"\x246\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x25B"+
		"\x5\x64\x33\x2\x24B\x24C\aJ\x2\x2\x24C\x25B\x5\x64\x33\x2\x24D\x24F\a"+
		"K\x2\x2\x24E\x250\x5\x90I\x2\x24F\x24E\x3\x2\x2\x2\x24F\x250\x3\x2\x2"+
		"\x2\x250\x25B\x3\x2\x2\x2\x251\x252\aL\x2\x2\x252\x25B\aM\x2\x2\x253\x254"+
		"\aL\x2\x2\x254\x25B\x5\x82\x42\x2\x255\x256\aN\x2\x2\x256\x25B\aM\x2\x2"+
		"\x257\x258\aN\x2\x2\x258\x25B\x5\x82\x42\x2\x259\x25B\x5\x66\x34\x2\x25A"+
		"\x240\x3\x2\x2\x2\x25A\x246\x3\x2\x2\x2\x25A\x24B\x3\x2\x2\x2\x25A\x24D"+
		"\x3\x2\x2\x2\x25A\x251\x3\x2\x2\x2\x25A\x253\x3\x2\x2\x2\x25A\x255\x3"+
		"\x2\x2\x2\x25A\x257\x3\x2\x2\x2\x25A\x259\x3\x2\x2\x2\x25B\x65\x3\x2\x2"+
		"\x2\x25C\x25F\x5h\x35\x2\x25D\x25E\aO\x2\x2\x25E\x260\x5\x66\x34\x2\x25F"+
		"\x25D\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260g\x3\x2\x2\x2\x261\x262\a"+
		"\x17\x2\x2\x262\x263\x5.\x18\x2\x263\x264\a\x1A\x2\x2\x264\x267\x3\x2"+
		"\x2\x2\x265\x267\x5v<\x2\x266\x261\x3\x2\x2\x2\x266\x265\x3\x2\x2\x2\x267"+
		"i\x3\x2\x2\x2\x268\x26A\a\x17\x2\x2\x269\x26B\x5\x90I\x2\x26A\x269\x3"+
		"\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26E\a\x1A"+
		"\x2\x2\x26D\x26F\x5\xACW\x2\x26E\x26D\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2"+
		"\x26Fk\x3\x2\x2\x2\x270\x271\aP\x2\x2\x271\x272\x5\x90I\x2\x272\x273\a"+
		"Q\x2\x2\x273m\x3\x2\x2\x2\x274\x277\x5\xACW\x2\x275\x277\x5\xAEX\x2\x276"+
		"\x274\x3\x2\x2\x2\x276\x275\x3\x2\x2\x2\x277o\x3\x2\x2\x2\x278\x27B\x5"+
		"j\x36\x2\x279\x27B\x5l\x37\x2\x27A\x278\x3\x2\x2\x2\x27A\x279\x3\x2\x2"+
		"\x2\x27Bq\x3\x2\x2\x2\x27C\x27E\x5p\x39\x2\x27D\x27C\x3\x2\x2\x2\x27E"+
		"\x27F\x3\x2\x2\x2\x27F\x27D\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x282"+
		"\x3\x2\x2\x2\x281\x283\x5n\x38\x2\x282\x281\x3\x2\x2\x2\x282\x283\x3\x2"+
		"\x2\x2\x283s\x3\x2\x2\x2\x284\x28D\x5\x80\x41\x2\x285\x28D\x5\x88\x45"+
		"\x2\x286\x28D\x5\x8A\x46\x2\x287\x28D\x5\x84\x43\x2\x288\x28D\x5~@\x2"+
		"\x289\x28D\x5x=\x2\x28A\x28D\x5\xAAV\x2\x28B\x28D\x5\xC0\x61\x2\x28C\x284"+
		"\x3\x2\x2\x2\x28C\x285\x3\x2\x2\x2\x28C\x286\x3\x2\x2\x2\x28C\x287\x3"+
		"\x2\x2\x2\x28C\x288\x3\x2\x2\x2\x28C\x289\x3\x2\x2\x2\x28C\x28A\x3\x2"+
		"\x2\x2\x28C\x28B\x3\x2\x2\x2\x28Du\x3\x2\x2\x2\x28E\x290\x5t;\x2\x28F"+
		"\x291\x5r:\x2\x290\x28F\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291w\x3\x2"+
		"\x2\x2\x292\x2A2\a\xF\x2\x2\x293\x294\x5|?\x2\x294\x295\aR\x2\x2\x295"+
		"\x296\x5:\x1E\x2\x296\x29E\x3\x2\x2\x2\x297\x298\aS\x2\x2\x298\x299\x5"+
		"|?\x2\x299\x29A\aR\x2\x2\x29A\x29B\x5:\x1E\x2\x29B\x29D\x3\x2\x2\x2\x29C"+
		"\x297\x3\x2\x2\x2\x29D\x2A0\x3\x2\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29F"+
		"\x3\x2\x2\x2\x29F\x2A3\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A1\x2A3\a\x13"+
		"\x2\x2\x2A2\x293\x3\x2\x2\x2\x2A2\x2A1\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2"+
		"\x2\x2A4\x2A5\a\x10\x2\x2\x2A5y\x3\x2\x2\x2\x2A6\x2AA\a\x18\x2\x2\x2A7"+
		"\x2AA\aM\x2\x2\x2A8\x2AA\x5\x82\x42\x2\x2A9\x2A6\x3\x2\x2\x2\x2A9\x2A7"+
		"\x3\x2\x2\x2\x2A9\x2A8\x3\x2\x2\x2\x2AA{\x3\x2\x2\x2\x2AB\x2AC\x5:\x1E"+
		"\x2\x2AC}\x3\x2\x2\x2\x2AD\x2BB\aT\x2\x2\x2AE\x2B7\aP\x2\x2\x2AF\x2B4"+
		"\x5:\x1E\x2\x2B0\x2B1\aS\x2\x2\x2B1\x2B3\x5:\x1E\x2\x2B2\x2B0\x3\x2\x2"+
		"\x2\x2B3\x2B6\x3\x2\x2\x2\x2B4\x2B2\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2"+
		"\x2B5\x2B8\x3\x2\x2\x2\x2B6\x2B4\x3\x2\x2\x2\x2B7\x2AF\x3\x2\x2\x2\x2B7"+
		"\x2B8\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x2BB\aQ\x2\x2\x2BA\x2AD\x3"+
		"\x2\x2\x2\x2BA\x2AE\x3\x2\x2\x2\x2BB\x7F\x3\x2\x2\x2\x2BC\x2C5\aU\x2\x2"+
		"\x2BD\x2C5\aV\x2\x2\x2BE\x2C5\aM\x2\x2\x2BF\x2C5\ao\x2\x2\x2C0\x2C5\a"+
		"W\x2\x2\x2C1\x2C5\aX\x2\x2\x2C2\x2C5\aY\x2\x2\x2C3\x2C5\x5\x82\x42\x2"+
		"\x2C4\x2BC\x3\x2\x2\x2\x2C4\x2BD\x3\x2\x2\x2\x2C4\x2BE\x3\x2\x2\x2\x2C4"+
		"\x2BF\x3\x2\x2\x2\x2C4\x2C0\x3\x2\x2\x2\x2C4\x2C1\x3\x2\x2\x2\x2C4\x2C2"+
		"\x3\x2\x2\x2\x2C4\x2C3\x3\x2\x2\x2\x2C5\x81\x3\x2\x2\x2\x2C6\x2C7\a\x13"+
		"\x2\x2\x2C7\x2CB\a\x18\x2\x2\x2C8\x2C9\a\x13\x2\x2\x2C9\x2CB\aM\x2\x2"+
		"\x2CA\x2C6\x3\x2\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CB\x83\x3\x2\x2\x2\x2CC"+
		"\x2CD\x5\x8EH\x2\x2CD\x85\x3\x2\x2\x2\x2CE\x2D1\x5\xA6T\x2\x2CF\x2D1\a"+
		"[\x2\x2\x2D0\x2CE\x3\x2\x2\x2\x2D0\x2CF\x3\x2\x2\x2\x2D1\x87\x3\x2\x2"+
		"\x2\x2D2\x2D5\x5\x8EH\x2\x2D3\x2D4\aZ\x2\x2\x2D4\x2D6\x5\x86\x44\x2\x2D5"+
		"\x2D3\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D5\x3\x2\x2\x2\x2D7\x2D8"+
		"\x3\x2\x2\x2\x2D8\x89\x3\x2\x2\x2\x2D9\x2DA\x5\x8EH\x2\x2DA\x2DB\aZ\x2"+
		"\x2\x2DB\x2DC\aL\x2\x2\x2DC\x2DD\aM\x2\x2\x2DD\x2EE\x3\x2\x2\x2\x2DE\x2DF"+
		"\x5\x8EH\x2\x2DF\x2E0\aZ\x2\x2\x2E0\x2E1\aL\x2\x2\x2E1\x2E2\x5\x82\x42"+
		"\x2\x2E2\x2EE\x3\x2\x2\x2\x2E3\x2E4\x5\x8EH\x2\x2E4\x2E5\aZ\x2\x2\x2E5"+
		"\x2E6\aN\x2\x2\x2E6\x2E7\aM\x2\x2\x2E7\x2EE\x3\x2\x2\x2\x2E8\x2E9\x5\x8E"+
		"H\x2\x2E9\x2EA\aZ\x2\x2\x2EA\x2EB\aN\x2\x2\x2EB\x2EC\x5\x82\x42\x2\x2EC"+
		"\x2EE\x3\x2\x2\x2\x2ED\x2D9\x3\x2\x2\x2\x2ED\x2DE\x3\x2\x2\x2\x2ED\x2E3"+
		"\x3\x2\x2\x2\x2ED\x2E8\x3\x2\x2\x2\x2EE\x8B\x3\x2\x2\x2\x2EF\x2F4\x5\x8E"+
		"H\x2\x2F0\x2F1\aP\x2\x2\x2F1\x2F2\x5\x90I\x2\x2F2\x2F3\aQ\x2\x2\x2F3\x2F5"+
		"\x3\x2\x2\x2\x2F4\x2F0\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F4\x3"+
		"\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x8D\x3\x2\x2\x2\x2F8\x2F9\t\r\x2"+
		"\x2\x2F9\x8F\x3\x2\x2\x2\x2FA\x2FF\x5\x94K\x2\x2FB\x2FC\aS\x2\x2\x2FC"+
		"\x2FE\x5\x94K\x2\x2FD\x2FB\x3\x2\x2\x2\x2FE\x301\x3\x2\x2\x2\x2FF\x2FD"+
		"\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x91\x3\x2\x2\x2\x301\x2FF\x3\x2"+
		"\x2\x2\x302\x303\x5z>\x2\x303\x304\aR\x2\x2\x304\x305\x5:\x1E\x2\x305"+
		"\x93\x3\x2\x2\x2\x306\x30D\x5\x92J\x2\x307\x308\a\x18\x2\x2\x308\x30A"+
		"\a\x13\x2\x2\x309\x307\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30B\x3"+
		"\x2\x2\x2\x30B\x30D\x5:\x1E\x2\x30C\x306\x3\x2\x2\x2\x30C\x309\x3\x2\x2"+
		"\x2\x30D\x95\x3\x2\x2\x2\x30E\x310\a\x13\x2\x2\x30F\x30E\x3\x2\x2\x2\x30F"+
		"\x310\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x314\a\x18\x2\x2\x312\x313"+
		"\a\n\x2\x2\x313\x315\x5:\x1E\x2\x314\x312\x3\x2\x2\x2\x314\x315\x3\x2"+
		"\x2\x2\x315\x97\x3\x2\x2\x2\x316\x317\a\x45\x2\x2\x317\x318\a\x18\x2\x2"+
		"\x318\x99\x3\x2\x2\x2\x319\x31A\a@\x2\x2\x31A\x31B\a\x18\x2\x2\x31B\x9B"+
		"\x3\x2\x2\x2\x31C\x31D\aS\x2\x2\x31D\x31E\a\x45\x2\x2\x31E\x31F\a\x18"+
		"\x2\x2\x31F\x9D\x3\x2\x2\x2\x320\x321\aS\x2\x2\x321\x322\a@\x2\x2\x322"+
		"\x323\a\x18\x2\x2\x323\x9F\x3\x2\x2\x2\x324\x326\aS\x2\x2\x325\x327\a"+
		"\x13\x2\x2\x326\x325\x3\x2\x2\x2\x326\x327\x3\x2\x2\x2\x327\x328\x3\x2"+
		"\x2\x2\x328\x32B\a\x18\x2\x2\x329\x32A\a\n\x2\x2\x32A\x32C\x5:\x1E\x2"+
		"\x32B\x329\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\xA1\x3\x2\x2\x2\x32D"+
		"\x32F\x5\x98M\x2\x32E\x330\x5\x9AN\x2\x32F\x32E\x3\x2\x2\x2\x32F\x330"+
		"\x3\x2\x2\x2\x330\x340\x3\x2\x2\x2\x331\x340\x5\x9AN\x2\x332\x336\x5\x96"+
		"L\x2\x333\x335\x5\xA0Q\x2\x334\x333\x3\x2\x2\x2\x335\x338\x3\x2\x2\x2"+
		"\x336\x334\x3\x2\x2\x2\x336\x337\x3\x2\x2\x2\x337\x33A\x3\x2\x2\x2\x338"+
		"\x336\x3\x2\x2\x2\x339\x33B\x5\x9CO\x2\x33A\x339\x3\x2\x2\x2\x33A\x33B"+
		"\x3\x2\x2\x2\x33B\x33D\x3\x2\x2\x2\x33C\x33E\x5\x9EP\x2\x33D\x33C\x3\x2"+
		"\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x340\x3\x2\x2\x2\x33F\x32D\x3\x2\x2"+
		"\x2\x33F\x331\x3\x2\x2\x2\x33F\x332\x3\x2\x2\x2\x340\xA3\x3\x2\x2\x2\x341"+
		"\x343\a\x17\x2\x2\x342\x344\x5\xA2R\x2\x343\x342\x3\x2\x2\x2\x343\x344"+
		"\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x346\a\x1A\x2\x2\x346\xA5\x3\x2"+
		"\x2\x2\x347\x348\t\xE\x2\x2\x348\xA7\x3\x2\x2\x2\x349\x34D\a\x66\x2\x2"+
		"\x34A\x34B\x5\x84\x43\x2\x34B\x34C\aZ\x2\x2\x34C\x34E\x3\x2\x2\x2\x34D"+
		"\x34A\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x34F\x3\x2\x2\x2\x34F\x351"+
		"\x5\xA6T\x2\x350\x352\x5\xA4S\x2\x351\x350\x3\x2\x2\x2\x351\x352\x3\x2"+
		"\x2\x2\x352\x353\x3\x2\x2\x2\x353\x354\x5\x10\t\x2\x354\xA9\x3\x2\x2\x2"+
		"\x355\x357\a>\x2\x2\x356\x358\x5\xA4S\x2\x357\x356\x3\x2\x2\x2\x357\x358"+
		"\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x35A\x5\x10\t\x2\x35A\xAB\x3\x2"+
		"\x2\x2\x35B\x360\a\xF\x2\x2\x35C\x35D\a?\x2\x2\x35D\x35E\x5\xA2R\x2\x35E"+
		"\x35F\a?\x2\x2\x35F\x361\x3\x2\x2\x2\x360\x35C\x3\x2\x2\x2\x360\x361\x3"+
		"\x2\x2\x2\x361\x362\x3\x2\x2\x2\x362\x363\x5\x4\x3\x2\x363\x364\a\x10"+
		"\x2\x2\x364\xAD\x3\x2\x2\x2\x365\x36A\a\x1B\x2\x2\x366\x367\a?\x2\x2\x367"+
		"\x368\x5\xA2R\x2\x368\x369\a?\x2\x2\x369\x36B\x3\x2\x2\x2\x36A\x366\x3"+
		"\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36D\x5\x4"+
		"\x3\x2\x36D\x36E\ag\x2\x2\x36E\xAF\x3\x2\x2\x2\x36F\x370\a\x45\x2\x2\x370"+
		"\x379\x5\x84\x43\x2\x371\x374\x5\x84\x43\x2\x372\x373\aS\x2\x2\x373\x375"+
		"\x5\xB2Z\x2\x374\x372\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2\x376\x374\x3\x2"+
		"\x2\x2\x376\x377\x3\x2\x2\x2\x377\x379\x3\x2\x2\x2\x378\x36F\x3\x2\x2"+
		"\x2\x378\x371\x3\x2\x2\x2\x379\xB1\x3\x2\x2\x2\x37A\x37B\a\x17\x2\x2\x37B"+
		"\x37C\x5\xB0Y\x2\x37C\x37D\a\x1A\x2\x2\x37D\x382\x3\x2\x2\x2\x37E\x37F"+
		"\a\x45\x2\x2\x37F\x382\x5\x84\x43\x2\x380\x382\x5\x84\x43\x2\x381\x37A"+
		"\x3\x2\x2\x2\x381\x37E\x3\x2\x2\x2\x381\x380\x3\x2\x2\x2\x382\xB3\x3\x2"+
		"\x2\x2\x383\x388\x5\xB6\\\x2\x384\x385\aS\x2\x2\x385\x387\x5\xB6\\\x2"+
		"\x386\x384\x3\x2\x2\x2\x387\x38A\x3\x2\x2\x2\x388\x386\x3\x2\x2\x2\x388"+
		"\x389\x3\x2\x2\x2\x389\xB5\x3\x2\x2\x2\x38A\x388\x3\x2\x2\x2\x38B\x38C"+
		"\a\x45\x2\x2\x38C\x38F\x5\x84\x43\x2\x38D\x38F\x5.\x18\x2\x38E\x38B\x3"+
		"\x2\x2\x2\x38E\x38D\x3\x2\x2\x2\x38F\xB7\x3\x2\x2\x2\x390\x391\ah\x2\x2"+
		"\x391\x392\x5\xBA^\x2\x392\x393\x5\xBA^\x2\x393\xB9\x3\x2\x2\x2\x394\x397"+
		"\a\x18\x2\x2\x395\x397\x5\x82\x42\x2\x396\x394\x3\x2\x2\x2\x396\x395\x3"+
		"\x2\x2\x2\x397\xBB\x3\x2\x2\x2\x398\x399\ai\x2\x2\x399\x39E\a\x18\x2\x2"+
		"\x39A\x39B\a\x65\x2\x2\x39B\x39D\a\x18\x2\x2\x39C\x39A\x3\x2\x2\x2\x39D"+
		"\x3A0\x3\x2\x2\x2\x39E\x39C\x3\x2\x2\x2\x39E\x39F\x3\x2\x2\x2\x39F\xBD"+
		"\x3\x2\x2\x2\x3A0\x39E\x3\x2\x2\x2\x3A1\x3A9\a[\x2\x2\x3A2\x3A3\a\x41"+
		"\x2\x2\x3A3\x3AA\x5v<\x2\x3A4\x3A7\a\x18\x2\x2\x3A5\x3A6\a;\x2\x2\x3A6"+
		"\x3A8\a\x18\x2\x2\x3A7\x3A5\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3AA"+
		"\x3\x2\x2\x2\x3A9\x3A2\x3\x2\x2\x2\x3A9\x3A4\x3\x2\x2\x2\x3AA\x3AB\x3"+
		"\x2\x2\x2\x3AB\x3AC\a\xF\x2\x2\x3AC\x3AD\x5\x4\x3\x2\x3AD\x3AE\a\x10\x2"+
		"\x2\x3AE\xBF\x3\x2\x2\x2\x3AF\x3B0\a\x17\x2\x2\x3B0\x3B3\a\xF\x2\x2\x3B1"+
		"\x3B2\a;\x2\x2\x3B2\x3B4\a\x18\x2\x2\x3B3\x3B1\x3\x2\x2\x2\x3B3\x3B4\x3"+
		"\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B6\x5\x4\x3\x2\x3B6\x3B7\a\x10"+
		"\x2\x2\x3B7\x3B8\a\x1A\x2\x2\x3B8\xC1\x3\x2\x2\x2\x3B9\x3BA\aj\x2\x2\x3BA"+
		"\x3BB\a\x18\x2\x2\x3BB\x3BC\a\xF\x2\x2\x3BC\x3BD\x5\x4\x3\x2\x3BD\x3BE"+
		"\a\x10\x2\x2\x3BE\xC3\x3\x2\x2\x2\x3BF\x3C0\ak\x2\x2\x3C0\x3C4\x5\x10"+
		"\t\x2\x3C1\x3C3\x5\xC6\x64\x2\x3C2\x3C1\x3\x2\x2\x2\x3C3\x3C6\x3\x2\x2"+
		"\x2\x3C4\x3C2\x3\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C8\x3\x2\x2\x2"+
		"\x3C6\x3C4\x3\x2\x2\x2\x3C7\x3C9\x5\xC8\x65\x2\x3C8\x3C7\x3\x2\x2\x2\x3C8"+
		"\x3C9\x3\x2\x2\x2\x3C9\x3CB\x3\x2\x2\x2\x3CA\x3CC\x5\xCA\x66\x2\x3CB\x3CA"+
		"\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\xC5\x3\x2\x2\x2\x3CD\x3CE\am\x2"+
		"\x2\x3CE\x3D1\a\x45\x2\x2\x3CF\x3D0\aR\x2\x2\x3D0\x3D2\a\x18\x2\x2\x3D1"+
		"\x3CF\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3\x3DE"+
		"\x5\x10\t\x2\x3D4\x3DA\am\x2\x2\x3D5\x3D8\x5\xCCg\x2\x3D6\x3D7\aR\x2\x2"+
		"\x3D7\x3D9\a\x18\x2\x2\x3D8\x3D6\x3\x2\x2\x2\x3D8\x3D9\x3\x2\x2\x2\x3D9"+
		"\x3DB\x3\x2\x2\x2\x3DA\x3D5\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DC"+
		"\x3\x2\x2\x2\x3DC\x3DE\x5\x10\t\x2\x3DD\x3CD\x3\x2\x2\x2\x3DD\x3D4\x3"+
		"\x2\x2\x2\x3DE\xC7\x3\x2\x2\x2\x3DF\x3E0\a\x1C\x2\x2\x3E0\x3E1\x5\x10"+
		"\t\x2\x3E1\xC9\x3\x2\x2\x2\x3E2\x3E3\al\x2\x2\x3E3\x3E4\x5\x10\t\x2\x3E4"+
		"\xCB\x3\x2\x2\x2\x3E5\x3EA\a\x18\x2\x2\x3E6\x3E7\aS\x2\x2\x3E7\x3E9\a"+
		"\x18\x2\x2\x3E8\x3E6\x3\x2\x2\x2\x3E9\x3EC\x3\x2\x2\x2\x3EA\x3E8\x3\x2"+
		"\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\xCD\x3\x2\x2\x2\x3EC\x3EA\x3\x2\x2\x2"+
		"\x3ED\x3EE\an\x2\x2\x3EE\x3EF\a\x17\x2\x2\x3EF\x3F0\a\x18\x2\x2\x3F0\x3F1"+
		"\a\x1A\x2\x2\x3F1\x3F2\x5\x10\t\x2\x3F2\xCF\x3\x2\x2\x2k\xD4\xDC\xE0\xE2"+
		"\xEC\x102\x120\x12A\x12F\x132\x135\x138\x142\x148\x15A\x167\x171\x17C"+
		"\x182\x18A\x18E\x192\x198\x19D\x1A2\x1A7\x1AE\x1B9\x1C0\x1CB\x1D3\x1DB"+
		"\x1E3\x1EC\x1F4\x1FF\x20A\x212\x21D\x228\x22D\x232\x23C\x242\x248\x24F"+
		"\x25A\x25F\x266\x26A\x26E\x276\x27A\x27F\x282\x28C\x290\x29E\x2A2\x2A9"+
		"\x2B4\x2B7\x2BA\x2C4\x2CA\x2D0\x2D7\x2ED\x2F6\x2FF\x309\x30C\x30F\x314"+
		"\x326\x32B\x32F\x336\x33A\x33D\x33F\x343\x34D\x351\x357\x360\x36A\x376"+
		"\x378\x381\x388\x38E\x396\x39E\x3A7\x3A9\x3B3\x3C4\x3C8\x3CB\x3D1\x3D8"+
		"\x3DA\x3DD\x3EA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace IronDragon.Parser
