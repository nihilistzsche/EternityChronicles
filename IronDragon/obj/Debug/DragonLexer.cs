
#line 1 "Lexer/DragonLexer.rl"
ï»¿// -----------------------------------------------------------------------
// <copyright file="DragonLexer.rl" Company="Michael Tindal">
// Copyright 2011-2013 Michael Tindal
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
// -----------------------------------------------------------------------


#line 244 "Lexer/DragonLexer.rl"


// Unreachable code detected.
#pragma warning disable 162

using IronDragon.Expressions;
using IronDragon.Parser;

namespace IronDragon.Lexer {
	using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
	using System.Text;
	using Microsoft.Scripting;


	public partial class DragonLexer {
		public StringBuilder StringBuf { get; set; }

        // SB
        public void CreateStringBuf() { StringBuf = new StringBuilder(); }

        public StringBuilder Delimiter { get; set; }

        public bool DelimiterFound { get; set; }


        public char DelimiterChar { get; set; }

        // DL
        public void CreateDelimiter() { Delimiter = new StringBuilder(); }

        // AP
        public void AppendChar() { StringBuf.Append(data.Substring(ts, 1)); }

        // DC
        public void SetDelimiterChar() { DelimiterChar = data[ts + 2]; }

        public bool DelimiterCharMatched(string buf, char chr) {
            switch (chr) {
                case '(':
                    chr = ')';
                    break;
                case '[':
                    chr = ']';
                    break;
                case '{':
                    chr = '}';
                    break;
                default:
                    break;
            }

            return buf.Substring(buf.Length - 1)[0] == chr;
        }

		
#line 82 "obj/Debug/DragonLexer.cs"
static readonly byte[] _dragon_lexer_actions =  new byte [] {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 1, 112, 1, 113, 1, 
	114, 1, 115, 1, 116, 1, 117, 1, 
	118, 1, 119, 1, 120, 1, 121, 1, 
	122, 1, 123, 1, 124, 1, 125, 1, 
	126, 1, 127, 1, 128, 1, 129, 1, 
	130, 1, 131, 1, 132, 1, 133, 1, 
	134, 1, 135, 1, 136, 1, 137, 1, 
	138, 1, 139, 1, 140, 1, 141, 1, 
	142, 1, 143, 1, 144, 1, 145, 1, 
	146, 1, 147, 1, 148, 1, 149, 1, 
	150, 2, 3, 12, 2, 3, 13, 2, 
	3, 14, 2, 3, 15, 2, 3, 16, 
	2, 3, 17, 2, 3, 18, 2, 3, 
	19, 2, 3, 20, 2, 3, 21, 2, 
	3, 22, 2, 3, 23, 2, 3, 24, 
	2, 3, 25, 2, 3, 26, 2, 3, 
	27, 2, 3, 28, 2, 3, 29, 2, 
	3, 30, 2, 3, 31, 2, 3, 32, 
	2, 3, 33, 2, 3, 34, 2, 3, 
	35, 2, 3, 36, 2, 3, 37, 2, 
	3, 38, 2, 3, 39, 2, 3, 40, 
	2, 3, 41, 2, 3, 42, 2, 3, 
	43, 2, 3, 44, 2, 3, 45, 2, 
	3, 46, 2, 3, 47, 2, 3, 48, 
	2, 3, 49, 2, 3, 50, 2, 3, 
	51, 2, 3, 52, 2, 3, 53, 2, 
	3, 54, 2, 3, 55, 2, 3, 56, 
	2, 3, 57, 2, 3, 58, 2, 3, 
	59, 2, 3, 60, 2, 3, 61, 2, 
	3, 62, 2, 3, 63, 2, 3, 64, 
	2, 3, 65, 2, 3, 66, 2, 3, 
	67, 2, 3, 68, 2, 3, 69, 2, 
	3, 70, 2, 3, 71, 2, 3, 72, 
	2, 3, 73, 2, 3, 74, 2, 3, 
	75, 2, 3, 76, 2, 3, 77, 2, 
	3, 78, 2, 3, 79, 2, 3, 80, 
	2, 3, 81, 2, 3, 82, 2, 3, 
	83, 2, 3, 84, 2, 3, 85, 2, 
	3, 86, 2, 3, 87, 2, 3, 88, 
	2, 3, 89, 2, 3, 90
};

static readonly short[] _dragon_lexer_key_offsets =  new short [] {
	0, 0, 2, 2, 3, 4, 4, 4, 
	4, 6, 6, 7, 9, 15, 16, 18, 
	72, 86, 99, 113, 114, 124, 132, 151, 
	164, 178, 192, 206, 220, 235, 250, 251, 
	252, 266, 280, 294, 298, 300, 303, 309, 
	323, 338, 352, 366, 381, 395, 410, 424, 
	438, 460, 461, 462, 476, 486, 495, 504, 
	513, 522, 532, 541, 550, 559, 568, 577, 
	586, 597, 606, 615, 624, 633, 642, 651, 
	661, 670, 679, 688, 697, 706, 716, 725, 
	735, 744, 753, 762, 771, 780, 789, 798, 
	808, 817, 826, 836, 845, 854, 863, 873, 
	882, 891, 900, 909, 919, 929, 938, 947, 
	956, 965, 974, 983, 992, 1001, 1010, 1019, 
	1028, 1037, 1046, 1055, 1064, 1073, 1082, 1091, 
	1101, 1110, 1119, 1128, 1137, 1148, 1157, 1166, 
	1175, 1183, 1192, 1201, 1210, 1219, 1228, 1237, 
	1246, 1255, 1264, 1274, 1283, 1292, 1301, 1313, 
	1323, 1332, 1341, 1350, 1359, 1368, 1377, 1386, 
	1395, 1404, 1413, 1424, 1433, 1442, 1451, 1460, 
	1469, 1478, 1487, 1496, 1505, 1514, 1525, 1534, 
	1543, 1551, 1560, 1569, 1578, 1587, 1596, 1605, 
	1614, 1623, 1632, 1641, 1650, 1659, 1668, 1677, 
	1686, 1695, 1704, 1713, 1722, 1737, 1751, 1751, 
	1752, 1753, 1756, 1756, 1756
};

static readonly char[] _dragon_lexer_trans_keys =  new char [] {
	'\u0022', '\u005c', '\u000a', '\u002f', '\u0027', '\u005c', '\u000a', '\u0030', 
	'\u0039', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u002a', 
	'\u002a', '\u002f', '\u000a', '\u0021', '\u0022', '\u0023', '\u0024', '\u0025', 
	'\u0026', '\u0027', '\u0028', '\u0029', '\u002a', '\u002b', '\u002c', '\u002d', 
	'\u002e', '\u002f', '\u0030', '\u003a', '\u003b', '\u003c', '\u003d', '\u003e', 
	'\u003f', '\u0040', '\u005b', '\u005c', '\u005d', '\u005e', '\u0060', '\u0061', 
	'\u0062', '\u0063', '\u0064', '\u0065', '\u0066', '\u0069', '\u006c', '\u006d', 
	'\u006e', '\u006f', '\u0072', '\u0073', '\u0074', '\u0075', '\u0077', '\u0079', 
	'\u007b', '\u007c', '\u007d', '\u007e', '\u0031', '\u0039', '\u0041', '\u007a', 
	'\u0021', '\u002d', '\u002f', '\u003a', '\u003d', '\u005e', '\u007c', '\u007e', 
	'\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', '\u0021', '\u002d', 
	'\u002f', '\u003a', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', 
	'\u002b', '\u003c', '\u0040', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', 
	'\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', '\u003c', 
	'\u0040', '\u000a', '\u0021', '\u0023', '\u003a', '\u005f', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u0025', '\u0026', '\u002d', 
	'\u002f', '\u003a', '\u003d', '\u0051', '\u005e', '\u0071', '\u0072', '\u0077', 
	'\u0078', '\u007c', '\u007e', '\u002a', '\u002b', '\u003c', '\u0040', '\u0021', 
	'\u002d', '\u002f', '\u003a', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', 
	'\u002a', '\u002b', '\u003c', '\u0040', '\u0021', '\u0025', '\u0026', '\u002d', 
	'\u002f', '\u003a', '\u003d', '\u005e', '\u007c', '\u007e', '\u002a', '\u002b', 
	'\u003c', '\u0040', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', '\u005e', 
	'\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', 
	'\u0021', '\u002a', '\u002b', '\u002d', '\u002f', '\u003a', '\u003d', '\u005e', 
	'\u007c', '\u007e', '\u0025', '\u0026', '\u003c', '\u0040', '\u0021', '\u002d', 
	'\u002f', '\u003a', '\u003d', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', 
	'\u002a', '\u002b', '\u003c', '\u0040', '\u0021', '\u002a', '\u002b', '\u002d', 
	'\u002f', '\u003a', '\u003d', '\u0040', '\u005e', '\u007c', '\u007e', '\u0025', 
	'\u0026', '\u003c', '\u003f', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', 
	'\u0040', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', 
	'\u003c', '\u003f', '\u002e', '\u002e', '\u0021', '\u002a', '\u002b', '\u002d', 
	'\u002f', '\u003a', '\u003d', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', 
	'\u003c', '\u0040', '\u000a', '\u0021', '\u002a', '\u002b', '\u002d', '\u002f', 
	'\u003a', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u003c', '\u0040', 
	'\u000a', '\u0021', '\u002d', '\u002f', '\u003a', '\u005e', '\u007c', '\u007e', 
	'\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', '\u002e', '\u0078', 
	'\u0030', '\u0039', '\u0030', '\u0039', '\u002e', '\u0030', '\u0039', '\u0030', 
	'\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0021', '\u002d', '\u002f', 
	'\u003a', '\u003d', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', 
	'\u002b', '\u003c', '\u0040', '\u0021', '\u002d', '\u002f', '\u003a', '\u003c', 
	'\u003d', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', 
	'\u003e', '\u0040', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', '\u005e', 
	'\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', 
	'\u0021', '\u002d', '\u002f', '\u003a', '\u003e', '\u005e', '\u007c', '\u007e', 
	'\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', '\u0021', '\u002d', 
	'\u002f', '\u003a', '\u003d', '\u003e', '\u005e', '\u007c', '\u007e', '\u0025', 
	'\u0026', '\u002a', '\u002b', '\u003c', '\u0040', '\u0021', '\u002d', '\u002f', 
	'\u003a', '\u003d', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', 
	'\u002b', '\u003c', '\u0040', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', 
	'\u003e', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', 
	'\u003c', '\u0040', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', '\u005e', 
	'\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', 
	'\u0021', '\u002d', '\u002f', '\u003a', '\u003f', '\u005e', '\u007c', '\u007e', 
	'\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', '\u0021', '\u002d', 
	'\u002f', '\u003a', '\u005e', '\u005f', '\u007c', '\u007e', '\u0025', '\u0026', 
	'\u002a', '\u002b', '\u0030', '\u0039', '\u003c', '\u003e', '\u003f', '\u0040', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u005d', '\u003d', '\u0021', '\u002d', 
	'\u002f', '\u003a', '\u003d', '\u005e', '\u007c', '\u007e', '\u0025', '\u0026', 
	'\u002a', '\u002b', '\u003c', '\u0040', '\u0021', '\u005f', '\u006c', '\u006e', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0069', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0061', '\u0030', '\u0039', '\u003f', '\u005a', '\u0062', '\u007a', 
	'\u0021', '\u005f', '\u0073', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0064', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u0072', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0067', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0069', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u006e', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0061', '\u0030', '\u0039', '\u003f', '\u005a', '\u0062', 
	'\u007a', '\u0021', '\u005f', '\u006b', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0061', '\u006c', '\u006f', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0062', '\u007a', '\u0021', '\u005f', '\u0073', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0061', '\u0030', '\u0039', '\u003f', '\u005a', '\u0062', '\u007a', 
	'\u0021', '\u005f', '\u0073', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0073', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u006e', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0073', '\u0074', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0074', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0069', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u006e', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0075', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u006f', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0066', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0061', 
	'\u0069', '\u0030', '\u0039', '\u003f', '\u005a', '\u0062', '\u007a', '\u0021', 
	'\u005f', '\u0075', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u006c', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0074', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u006e', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0064', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u003f', '\u005f', 
	'\u0030', '\u0039', '\u0040', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u006c', '\u006e', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0073', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0064', '\u0073', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0075', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0072', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0061', '\u006f', '\u0030', '\u0039', '\u003f', '\u005a', '\u0062', 
	'\u007a', '\u0021', '\u005f', '\u006c', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0073', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0072', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0066', 
	'\u006e', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0063', '\u0074', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u006c', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0075', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0064', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0072', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0066', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0061', '\u0030', '\u0039', '\u003f', '\u005a', '\u0062', 
	'\u007a', '\u0021', '\u005f', '\u0063', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006f', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006f', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0070', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u006f', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0064', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0075', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u006c', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0069', '\u006f', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006c', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0074', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0072', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u006d', '\u0073', '\u0074', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006f', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0076', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u006d', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0074', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0068', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006f', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0064', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0063', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0075', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0072', '\u0075', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0079', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0072', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006e', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', 
	'\u0075', '\u0077', '\u0079', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u006c', '\u0074', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0066', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0070', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0072', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0069', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0074', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0063', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0068', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006e', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0063', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0068', 
	'\u0072', '\u0079', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0072', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u006f', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0077', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0075', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0070', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u006f', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0066', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u006e', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0064', '\u006c', '\u0074', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0066', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u006d', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0074', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0068', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006f', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0064', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0073', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0073', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u0069', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u006c', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u005f', '\u0068', '\u0030', '\u0039', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0069', '\u0030', '\u0039', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u006c', '\u0030', 
	'\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', '\u0065', 
	'\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', '\u005f', 
	'\u0069', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', '\u0021', 
	'\u005f', '\u0065', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0021', '\u005f', '\u006c', '\u0030', '\u0039', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0021', '\u005f', '\u0064', '\u0030', '\u0039', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', '\u003e', 
	'\u005e', '\u007c', '\u007e', '\u0025', '\u0026', '\u002a', '\u002b', '\u003c', 
	'\u0040', '\u0021', '\u002d', '\u002f', '\u003a', '\u003d', '\u005e', '\u007c', 
	'\u007e', '\u0025', '\u0026', '\u002a', '\u002b', '\u003c', '\u0040', '\u002a', 
	'\u002f', '\u0020', '\u0009', '\u000d', (char) 0
};

static readonly sbyte[] _dragon_lexer_single_lengths =  new sbyte [] {
	0, 2, 0, 1, 1, 0, 0, 0, 
	2, 0, 1, 0, 0, 1, 2, 50, 
	8, 7, 8, 1, 4, 2, 15, 7, 
	10, 8, 10, 8, 11, 9, 1, 1, 
	10, 10, 8, 2, 0, 1, 0, 8, 
	9, 8, 8, 9, 8, 9, 8, 8, 
	8, 1, 1, 8, 4, 3, 3, 3, 
	3, 4, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 4, 3, 4, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 4, 3, 3, 3, 4, 3, 
	3, 3, 3, 4, 4, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	2, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 6, 4, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 5, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 3, 3, 
	2, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 9, 8, 0, 1, 
	1, 1, 0, 0, 0
};

static readonly sbyte[] _dragon_lexer_range_lengths =  new sbyte [] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 3, 0, 0, 2, 
	3, 3, 3, 0, 3, 3, 2, 3, 
	2, 3, 2, 3, 2, 3, 0, 0, 
	2, 2, 3, 1, 1, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	7, 0, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 0, 0, 
	0, 1, 0, 0, 0
};

static readonly short[] _dragon_lexer_index_offsets =  new short [] {
	0, 0, 3, 4, 6, 8, 9, 10, 
	11, 14, 15, 17, 19, 23, 25, 28, 
	81, 93, 104, 116, 118, 126, 132, 150, 
	161, 174, 186, 199, 211, 225, 238, 240, 
	242, 255, 268, 280, 284, 286, 289, 293, 
	305, 318, 330, 342, 355, 367, 380, 392, 
	404, 420, 422, 424, 436, 444, 451, 458, 
	465, 472, 480, 487, 494, 501, 508, 515, 
	522, 531, 538, 545, 552, 559, 566, 573, 
	581, 588, 595, 602, 609, 616, 624, 631, 
	639, 646, 653, 660, 667, 674, 681, 688, 
	696, 703, 710, 718, 725, 732, 739, 747, 
	754, 761, 768, 775, 783, 791, 798, 805, 
	812, 819, 826, 833, 840, 847, 854, 861, 
	868, 875, 882, 889, 896, 903, 910, 917, 
	925, 932, 939, 946, 953, 962, 969, 976, 
	983, 989, 996, 1003, 1010, 1017, 1024, 1031, 
	1038, 1045, 1052, 1060, 1067, 1074, 1081, 1091, 
	1099, 1106, 1113, 1120, 1127, 1134, 1141, 1148, 
	1155, 1162, 1169, 1178, 1185, 1192, 1199, 1206, 
	1213, 1220, 1227, 1234, 1241, 1248, 1257, 1264, 
	1271, 1277, 1284, 1291, 1298, 1305, 1312, 1319, 
	1326, 1333, 1340, 1347, 1354, 1361, 1368, 1375, 
	1382, 1389, 1396, 1403, 1410, 1423, 1435, 1436, 
	1438, 1440, 1443, 1444, 1445
};

static readonly short[] _dragon_lexer_indicies =  new short [] {
	1, 2, 0, 0, 5, 4, 8, 7, 
	10, 11, 12, 14, 15, 13, 13, 18, 
	17, 20, 19, 21, 21, 21, 19, 23, 
	22, 23, 24, 22, 26, 27, 0, 28, 
	29, 30, 31, 13, 32, 33, 34, 35, 
	36, 37, 38, 39, 40, 42, 43, 44, 
	45, 46, 47, 48, 50, 52, 51, 53, 
	52, 54, 55, 56, 57, 58, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 68, 
	69, 70, 71, 72, 73, 74, 41, 49, 
	25, 76, 76, 76, 76, 77, 76, 76, 
	78, 76, 76, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 16, 
	76, 76, 76, 76, 80, 76, 76, 76, 
	76, 76, 76, 79, 5, 4, 49, 83, 
	84, 49, 49, 49, 49, 82, 49, 49, 
	49, 49, 49, 16, 76, 86, 76, 76, 
	87, 76, 88, 89, 76, 89, 90, 91, 
	89, 76, 76, 76, 76, 85, 87, 87, 
	93, 87, 87, 87, 87, 87, 87, 87, 
	7, 76, 76, 95, 76, 76, 76, 96, 
	76, 76, 76, 76, 76, 94, 76, 76, 
	76, 76, 98, 76, 76, 76, 76, 76, 
	76, 97, 76, 100, 76, 76, 76, 76, 
	101, 76, 76, 76, 76, 76, 99, 76, 
	76, 76, 76, 103, 76, 76, 76, 76, 
	76, 76, 102, 76, 76, 105, 76, 76, 
	76, 106, 107, 76, 76, 76, 76, 76, 
	104, 76, 109, 76, 76, 110, 111, 76, 
	76, 76, 76, 76, 76, 108, 113, 112, 
	115, 114, 76, 117, 76, 76, 118, 76, 
	119, 76, 76, 76, 76, 76, 116, 18, 
	120, 121, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 17, 18, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 17, 
	123, 124, 41, 122, 20, 125, 123, 41, 
	122, 21, 21, 21, 126, 76, 76, 76, 
	128, 129, 76, 76, 76, 76, 76, 76, 
	127, 76, 76, 76, 76, 131, 132, 76, 
	133, 76, 76, 76, 76, 130, 76, 135, 
	76, 76, 136, 76, 76, 76, 76, 76, 
	76, 134, 76, 76, 76, 76, 138, 76, 
	76, 76, 76, 76, 76, 137, 76, 76, 
	76, 76, 140, 141, 76, 76, 142, 76, 
	76, 76, 139, 76, 76, 76, 76, 144, 
	76, 76, 76, 76, 76, 76, 143, 76, 
	76, 76, 76, 146, 147, 76, 76, 76, 
	76, 76, 76, 145, 76, 76, 76, 76, 
	149, 76, 76, 76, 76, 76, 76, 148, 
	76, 76, 76, 76, 151, 76, 76, 76, 
	76, 76, 76, 150, 48, 76, 76, 76, 
	76, 49, 76, 76, 76, 76, 49, 76, 
	48, 49, 49, 82, 153, 152, 155, 154, 
	76, 76, 76, 76, 157, 158, 76, 76, 
	76, 76, 76, 156, 49, 49, 159, 160, 
	49, 49, 49, 82, 49, 49, 161, 49, 
	49, 49, 82, 49, 49, 162, 49, 49, 
	49, 82, 49, 49, 163, 49, 49, 49, 
	82, 49, 49, 164, 49, 49, 49, 82, 
	49, 49, 165, 166, 49, 49, 49, 82, 
	49, 49, 167, 49, 49, 49, 82, 49, 
	49, 168, 49, 49, 49, 82, 49, 49, 
	169, 49, 49, 49, 82, 49, 49, 170, 
	49, 49, 49, 82, 49, 49, 171, 49, 
	49, 49, 82, 49, 49, 172, 49, 49, 
	49, 82, 49, 49, 173, 174, 175, 49, 
	49, 49, 82, 49, 49, 176, 49, 49, 
	49, 82, 49, 49, 177, 49, 49, 49, 
	82, 49, 49, 178, 49, 49, 49, 82, 
	49, 49, 179, 49, 49, 49, 82, 49, 
	49, 180, 49, 49, 49, 82, 49, 49, 
	181, 49, 49, 49, 82, 49, 49, 182, 
	183, 49, 49, 49, 82, 49, 49, 184, 
	49, 49, 49, 82, 49, 49, 185, 49, 
	49, 49, 82, 49, 49, 186, 49, 49, 
	49, 82, 49, 49, 187, 49, 49, 49, 
	82, 49, 49, 188, 49, 49, 49, 82, 
	49, 49, 189, 190, 49, 49, 49, 82, 
	49, 49, 191, 49, 49, 49, 82, 49, 
	49, 193, 194, 49, 49, 49, 192, 49, 
	49, 195, 49, 49, 49, 82, 49, 49, 
	196, 49, 49, 49, 82, 49, 49, 197, 
	49, 49, 49, 82, 49, 49, 198, 49, 
	49, 49, 82, 49, 49, 199, 49, 49, 
	49, 82, 49, 49, 200, 49, 49, 49, 
	82, 49, 201, 49, 49, 49, 49, 82, 
	49, 49, 202, 203, 49, 49, 49, 82, 
	49, 49, 204, 49, 49, 49, 82, 49, 
	49, 205, 49, 49, 49, 82, 49, 49, 
	206, 207, 49, 49, 49, 82, 49, 49, 
	208, 49, 49, 49, 82, 49, 49, 209, 
	49, 49, 49, 82, 49, 49, 210, 49, 
	49, 49, 82, 49, 49, 211, 212, 49, 
	49, 49, 82, 49, 49, 213, 49, 49, 
	49, 82, 49, 49, 214, 49, 49, 49, 
	82, 49, 49, 215, 49, 49, 49, 82, 
	49, 49, 216, 49, 49, 49, 82, 49, 
	49, 217, 218, 49, 49, 49, 82, 49, 
	49, 220, 221, 49, 49, 49, 219, 49, 
	49, 222, 49, 49, 49, 82, 49, 49, 
	223, 49, 49, 49, 82, 49, 49, 224, 
	49, 49, 49, 82, 49, 49, 225, 49, 
	49, 49, 82, 49, 49, 226, 49, 49, 
	49, 82, 49, 49, 227, 49, 49, 49, 
	82, 49, 49, 228, 49, 49, 49, 82, 
	49, 49, 229, 49, 49, 49, 82, 49, 
	49, 230, 49, 49, 49, 82, 49, 49, 
	231, 49, 49, 49, 82, 49, 49, 232, 
	49, 49, 49, 82, 49, 49, 233, 49, 
	49, 49, 82, 49, 49, 234, 49, 49, 
	49, 82, 49, 49, 235, 49, 49, 49, 
	82, 49, 49, 236, 49, 49, 49, 82, 
	49, 49, 237, 49, 49, 49, 82, 49, 
	49, 238, 49, 49, 49, 82, 49, 49, 
	239, 49, 49, 49, 82, 49, 49, 240, 
	241, 49, 49, 49, 82, 49, 49, 242, 
	49, 49, 49, 82, 49, 49, 243, 49, 
	49, 49, 82, 49, 49, 244, 49, 49, 
	49, 82, 49, 49, 245, 49, 49, 49, 
	82, 49, 49, 246, 247, 248, 49, 49, 
	49, 82, 49, 49, 249, 49, 49, 49, 
	82, 49, 49, 250, 49, 49, 49, 82, 
	49, 49, 251, 49, 49, 49, 82, 49, 
	252, 49, 49, 49, 82, 49, 49, 253, 
	49, 49, 49, 82, 49, 49, 254, 49, 
	49, 49, 82, 49, 49, 255, 49, 49, 
	49, 82, 49, 49, 256, 49, 49, 49, 
	82, 49, 49, 257, 49, 49, 49, 82, 
	49, 49, 258, 49, 49, 49, 82, 49, 
	49, 259, 49, 49, 49, 82, 49, 49, 
	260, 49, 49, 49, 82, 49, 49, 261, 
	49, 49, 49, 82, 49, 49, 262, 263, 
	49, 49, 49, 82, 49, 49, 264, 49, 
	49, 49, 82, 49, 49, 265, 49, 49, 
	49, 82, 49, 49, 266, 49, 49, 49, 
	82, 49, 49, 267, 268, 269, 270, 49, 
	49, 49, 82, 49, 49, 271, 272, 49, 
	49, 49, 82, 49, 49, 273, 49, 49, 
	49, 82, 49, 49, 274, 49, 49, 49, 
	82, 49, 49, 275, 49, 49, 49, 82, 
	49, 49, 276, 49, 49, 49, 82, 49, 
	49, 277, 49, 49, 49, 82, 49, 49, 
	278, 49, 49, 49, 82, 49, 49, 279, 
	49, 49, 49, 82, 49, 49, 280, 49, 
	49, 49, 82, 49, 49, 281, 49, 49, 
	49, 82, 49, 49, 282, 49, 49, 49, 
	82, 49, 49, 283, 284, 285, 49, 49, 
	49, 82, 49, 49, 286, 49, 49, 49, 
	82, 49, 49, 287, 49, 49, 49, 82, 
	49, 49, 288, 49, 49, 49, 82, 49, 
	49, 289, 49, 49, 49, 82, 49, 49, 
	290, 49, 49, 49, 82, 49, 49, 291, 
	49, 49, 49, 82, 49, 49, 292, 49, 
	49, 49, 82, 49, 49, 293, 49, 49, 
	49, 82, 49, 49, 294, 49, 49, 49, 
	82, 49, 49, 295, 49, 49, 49, 82, 
	49, 49, 296, 297, 298, 49, 49, 49, 
	82, 49, 49, 299, 49, 49, 49, 82, 
	49, 49, 300, 49, 49, 49, 82, 49, 
	301, 49, 49, 49, 82, 49, 49, 302, 
	49, 49, 49, 82, 49, 49, 303, 49, 
	49, 49, 82, 49, 49, 304, 49, 49, 
	49, 82, 49, 49, 305, 49, 49, 49, 
	82, 49, 49, 306, 49, 49, 49, 82, 
	49, 49, 307, 49, 49, 49, 82, 49, 
	49, 308, 49, 49, 49, 82, 49, 49, 
	309, 49, 49, 49, 82, 49, 49, 310, 
	49, 49, 49, 82, 49, 49, 311, 49, 
	49, 49, 82, 49, 49, 312, 49, 49, 
	49, 82, 49, 49, 313, 49, 49, 49, 
	82, 49, 49, 314, 49, 49, 49, 82, 
	49, 49, 315, 49, 49, 49, 82, 49, 
	49, 316, 49, 49, 49, 82, 49, 49, 
	317, 49, 49, 49, 82, 49, 49, 318, 
	49, 49, 49, 82, 49, 49, 319, 49, 
	49, 49, 82, 49, 49, 320, 49, 49, 
	49, 82, 76, 76, 76, 76, 322, 323, 
	76, 324, 76, 76, 76, 76, 321, 76, 
	76, 76, 76, 326, 76, 76, 76, 76, 
	76, 76, 325, 52, 328, 327, 330, 329, 
	332, 332, 331, 333, 334, 335, 0
};

static readonly byte[] _dragon_lexer_trans_targs =  new byte [] {
	1, 15, 2, 15, 3, 15, 15, 4, 
	15, 15, 15, 15, 15, 8, 15, 9, 
	15, 10, 15, 15, 36, 38, 13, 14, 
	190, 15, 15, 16, 19, 20, 22, 24, 
	15, 15, 26, 28, 15, 29, 30, 32, 
	35, 37, 39, 15, 40, 43, 45, 47, 
	48, 21, 49, 15, 0, 51, 52, 57, 
	64, 77, 87, 94, 99, 111, 114, 119, 
	122, 123, 142, 154, 164, 180, 184, 15, 
	188, 15, 17, 15, 17, 18, 17, 15, 
	17, 15, 15, 15, 15, 15, 17, 23, 
	17, 5, 6, 7, 15, 17, 15, 25, 
	17, 15, 17, 15, 27, 17, 15, 17, 
	15, 17, 17, 17, 15, 17, 17, 17, 
	15, 31, 15, 15, 15, 17, 33, 17, 
	34, 34, 15, 11, 12, 15, 15, 15, 
	17, 17, 15, 41, 42, 17, 15, 17, 
	17, 15, 17, 15, 44, 17, 17, 15, 
	17, 15, 17, 46, 15, 17, 15, 17, 
	15, 50, 15, 15, 15, 17, 17, 53, 
	56, 54, 55, 21, 21, 58, 61, 59, 
	60, 21, 62, 63, 21, 65, 67, 70, 
	66, 21, 68, 69, 21, 71, 72, 73, 
	21, 74, 75, 76, 21, 78, 21, 79, 
	15, 80, 83, 81, 82, 21, 84, 85, 
	86, 21, 88, 90, 89, 21, 21, 91, 
	92, 93, 21, 95, 98, 96, 97, 21, 
	21, 21, 100, 15, 101, 105, 102, 103, 
	104, 21, 106, 107, 108, 109, 110, 21, 
	112, 113, 21, 115, 116, 117, 118, 21, 
	120, 121, 21, 21, 21, 124, 125, 135, 
	138, 126, 127, 128, 129, 130, 131, 132, 
	133, 134, 21, 136, 137, 21, 139, 140, 
	21, 141, 21, 143, 145, 148, 152, 144, 
	21, 21, 146, 147, 21, 149, 150, 151, 
	21, 153, 21, 155, 158, 160, 156, 157, 
	21, 159, 21, 161, 162, 163, 21, 165, 
	166, 175, 178, 167, 168, 169, 170, 171, 
	172, 173, 174, 21, 176, 177, 21, 179, 
	21, 181, 182, 183, 21, 185, 186, 187, 
	21, 15, 17, 17, 189, 15, 17, 191, 
	192, 191, 191, 193, 193, 194, 195, 196
};

static readonly short[] _dragon_lexer_trans_actions =  new short [] {
	0, 53, 0, 135, 0, 25, 139, 0, 
	61, 137, 57, 59, 55, 0, 51, 0, 
	143, 0, 27, 141, 0, 0, 0, 0, 
	1, 65, 63, 0, 7, 0, 7, 0, 
	41, 43, 0, 0, 45, 0, 0, 0, 
	7, 7, 0, 33, 0, 0, 0, 0, 
	0, 370, 0, 35, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	0, 39, 358, 99, 379, 0, 334, 87, 
	346, 73, 125, 31, 29, 109, 328, 7, 
	298, 0, 0, 0, 127, 376, 117, 0, 
	310, 95, 322, 105, 0, 292, 111, 301, 
	101, 361, 286, 337, 103, 364, 289, 340, 
	79, 0, 81, 47, 107, 145, 379, 295, 
	379, 148, 129, 0, 0, 131, 133, 71, 
	280, 283, 89, 0, 0, 277, 113, 373, 
	304, 91, 349, 77, 0, 325, 331, 85, 
	343, 93, 352, 0, 115, 307, 83, 367, 
	75, 0, 123, 49, 121, 316, 355, 0, 
	0, 0, 0, 259, 238, 0, 0, 0, 
	0, 187, 0, 0, 214, 0, 0, 0, 
	0, 223, 0, 0, 151, 0, 0, 0, 
	208, 0, 0, 0, 217, 0, 181, 0, 
	69, 0, 0, 0, 0, 226, 0, 0, 
	0, 247, 0, 0, 0, 175, 184, 0, 
	0, 0, 178, 0, 0, 0, 0, 235, 
	166, 169, 0, 67, 0, 0, 0, 0, 
	0, 250, 0, 0, 0, 0, 0, 262, 
	0, 0, 268, 0, 0, 0, 0, 154, 
	0, 0, 205, 244, 241, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 256, 0, 0, 229, 0, 0, 
	265, 0, 211, 0, 0, 0, 0, 0, 
	163, 196, 0, 0, 199, 0, 0, 0, 
	220, 0, 157, 0, 0, 0, 0, 0, 
	160, 0, 232, 0, 0, 0, 271, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 253, 0, 0, 172, 0, 
	193, 0, 0, 0, 190, 0, 0, 0, 
	202, 119, 313, 274, 0, 97, 319, 11, 
	0, 13, 9, 17, 15, 19, 21, 23
};

static readonly short[] _dragon_lexer_to_state_actions =  new short [] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 3, 3, 3, 3
};

static readonly short[] _dragon_lexer_from_state_actions =  new short [] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	0, 5, 5, 5, 5
};

static readonly short[] _dragon_lexer_eof_trans =  new short [] {
	0, 0, 0, 4, 7, 10, 10, 10, 
	0, 0, 17, 20, 20, 0, 0, 0, 
	76, 17, 80, 82, 83, 17, 86, 93, 
	95, 98, 100, 103, 105, 109, 113, 115, 
	117, 93, 17, 123, 126, 123, 127, 128, 
	131, 135, 138, 140, 144, 146, 149, 151, 
	83, 153, 155, 157, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 193, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 220, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 322, 326, 0, 0, 
	330, 0, 0, 0, 0
};

const int dragon_lexer_start = 15;
const int dragon_lexer_first_final = 15;
const int dragon_lexer_error = 0;

const int dragon_lexer_en_c_comment = 13;
const int dragon_lexer_en_attach_comment = 191;
const int dragon_lexer_en_heredoc = 193;
const int dragon_lexer_en_stringarray = 194;
const int dragon_lexer_en_string = 195;
const int dragon_lexer_en_regex = 196;
const int dragon_lexer_en_main = 15;


#line 302 "Lexer/DragonLexer.rl"

		int ts, te;

		int cs, act;

		int p = 0;

		int pe, eof;

		string data;

		public DragonTokenQueue Queue { get; set; }

		public DragonLexer(string fileName, string source) {
			SetupLineIndexes(source);
			Queue = new DragonTokenQueue(new DragonParser(null), this, fileName);
			SetSource(source);
		}

		public void SetSource(string source) {
			data = source;

			
#line 864 "obj/Debug/DragonLexer.cs"
	{
	cs = dragon_lexer_start;
	ts = -1;
	te = -1;
	act = 0;
	}

#line 325 "Lexer/DragonLexer.rl"
		}

		public void Scan() {
			pe = data.Length;
			eof = pe;

			
#line 880 "obj/Debug/DragonLexer.cs"
	{
	sbyte _klen;
	short _trans;
	int _acts;
	int _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _dragon_lexer_from_state_actions[cs];
	_nacts = _dragon_lexer_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _dragon_lexer_actions[_acts++] ) {
	case 2:
#line 1 "NONE"
	{ts = p;}
	break;
#line 901 "obj/Debug/DragonLexer.cs"
		default: break;
		}
	}

	_keys = _dragon_lexer_key_offsets[cs];
	_trans = (short)_dragon_lexer_index_offsets[cs];

	_klen = _dragon_lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _dragon_lexer_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _dragon_lexer_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _dragon_lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _dragon_lexer_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _dragon_lexer_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	_trans = (short)_dragon_lexer_indicies[_trans];
_eof_trans:
	cs = _dragon_lexer_trans_targs[_trans];

	if ( _dragon_lexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dragon_lexer_trans_actions[_trans];
	_nacts = _dragon_lexer_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _dragon_lexer_actions[_acts++] )
		{
	case 0:
#line 26 "Lexer/DragonLexer.rl"
	{{cs = 15;if (true) goto _again;}}
	break;
	case 3:
#line 1 "NONE"
	{te = p+1;}
	break;
	case 4:
#line 29 "Lexer/DragonLexer.rl"
	{te = p+1;{ Token("ATTACHCOMMENT", StringBuf.ToString()); }}
	break;
	case 5:
#line 31 "Lexer/DragonLexer.rl"
	{te = p+1;{ AppendChar(); }}
	break;
	case 6:
#line 31 "Lexer/DragonLexer.rl"
	{te = p;p--;{ AppendChar(); }}
	break;
	case 7:
#line 35 "Lexer/DragonLexer.rl"
	{te = p+1;{ if(!DelimiterFound) { DelimiterFound = true; } else { StringBuf.Append(data.Substring(ts, 1)); } }}
	break;
	case 8:
#line 37 "Lexer/DragonLexer.rl"
	{te = p+1;{
                        if(!DelimiterFound) {
                            Delimiter.Append(data.Substring(ts, 1));
                        } else {
							StringBuf.Append(data.Substring(ts, 1));
							if(StringBuf.ToString().EndsWith(Delimiter.ToString())) {
								Token("STRING", StringBuf.Replace(Delimiter.ToString(),"").ToString());
								{cs = 15;if (true) goto _again;}
							}
						}
					}}
	break;
	case 9:
#line 52 "Lexer/DragonLexer.rl"
	{te = p+1;{
                        AppendChar();
						if(DelimiterCharMatched(StringBuf.ToString(), DelimiterChar)) {
							Token("STRINGARRAY", StringBuf.ToString().Substring(0, StringBuf.ToString().Length-1));
							{cs = 15;if (true) goto _again;}
						};
                    }}
	break;
	case 10:
#line 62 "Lexer/DragonLexer.rl"
	{te = p+1;{
						AppendChar();
						if(DelimiterCharMatched(StringBuf.ToString(), DelimiterChar)) {
							Token("STRING", StringBuf.ToString().Substring(0, StringBuf.ToString().Length-1));
							{cs = 15;if (true) goto _again;}
						};
                    }}
	break;
	case 11:
#line 72 "Lexer/DragonLexer.rl"
	{te = p+1;{
                        AppendChar();
						if(DelimiterCharMatched(StringBuf.ToString(), DelimiterChar)) {
							Token("REGEX", StringBuf.ToString().Substring(0, StringBuf.ToString().Length-1));
							{cs = 15;if (true) goto _again;}
						};
                    }}
	break;
	case 12:
#line 89 "Lexer/DragonLexer.rl"
	{act = 10;}
	break;
	case 13:
#line 90 "Lexer/DragonLexer.rl"
	{act = 11;}
	break;
	case 14:
#line 93 "Lexer/DragonLexer.rl"
	{act = 12;}
	break;
	case 15:
#line 94 "Lexer/DragonLexer.rl"
	{act = 13;}
	break;
	case 16:
#line 95 "Lexer/DragonLexer.rl"
	{act = 14;}
	break;
	case 17:
#line 96 "Lexer/DragonLexer.rl"
	{act = 15;}
	break;
	case 18:
#line 97 "Lexer/DragonLexer.rl"
	{act = 16;}
	break;
	case 19:
#line 98 "Lexer/DragonLexer.rl"
	{act = 17;}
	break;
	case 20:
#line 100 "Lexer/DragonLexer.rl"
	{act = 19;}
	break;
	case 21:
#line 101 "Lexer/DragonLexer.rl"
	{act = 20;}
	break;
	case 22:
#line 102 "Lexer/DragonLexer.rl"
	{act = 21;}
	break;
	case 23:
#line 103 "Lexer/DragonLexer.rl"
	{act = 22;}
	break;
	case 24:
#line 104 "Lexer/DragonLexer.rl"
	{act = 23;}
	break;
	case 25:
#line 105 "Lexer/DragonLexer.rl"
	{act = 24;}
	break;
	case 26:
#line 106 "Lexer/DragonLexer.rl"
	{act = 25;}
	break;
	case 27:
#line 107 "Lexer/DragonLexer.rl"
	{act = 26;}
	break;
	case 28:
#line 108 "Lexer/DragonLexer.rl"
	{act = 27;}
	break;
	case 29:
#line 110 "Lexer/DragonLexer.rl"
	{act = 29;}
	break;
	case 30:
#line 111 "Lexer/DragonLexer.rl"
	{act = 30;}
	break;
	case 31:
#line 112 "Lexer/DragonLexer.rl"
	{act = 31;}
	break;
	case 32:
#line 113 "Lexer/DragonLexer.rl"
	{act = 32;}
	break;
	case 33:
#line 114 "Lexer/DragonLexer.rl"
	{act = 33;}
	break;
	case 34:
#line 115 "Lexer/DragonLexer.rl"
	{act = 34;}
	break;
	case 35:
#line 116 "Lexer/DragonLexer.rl"
	{act = 35;}
	break;
	case 36:
#line 117 "Lexer/DragonLexer.rl"
	{act = 36;}
	break;
	case 37:
#line 118 "Lexer/DragonLexer.rl"
	{act = 37;}
	break;
	case 38:
#line 119 "Lexer/DragonLexer.rl"
	{act = 38;}
	break;
	case 39:
#line 120 "Lexer/DragonLexer.rl"
	{act = 39;}
	break;
	case 40:
#line 121 "Lexer/DragonLexer.rl"
	{act = 40;}
	break;
	case 41:
#line 122 "Lexer/DragonLexer.rl"
	{act = 41;}
	break;
	case 42:
#line 123 "Lexer/DragonLexer.rl"
	{act = 42;}
	break;
	case 43:
#line 124 "Lexer/DragonLexer.rl"
	{act = 43;}
	break;
	case 44:
#line 125 "Lexer/DragonLexer.rl"
	{act = 44;}
	break;
	case 45:
#line 126 "Lexer/DragonLexer.rl"
	{act = 45;}
	break;
	case 46:
#line 127 "Lexer/DragonLexer.rl"
	{act = 46;}
	break;
	case 47:
#line 128 "Lexer/DragonLexer.rl"
	{act = 47;}
	break;
	case 48:
#line 129 "Lexer/DragonLexer.rl"
	{act = 48;}
	break;
	case 49:
#line 130 "Lexer/DragonLexer.rl"
	{act = 49;}
	break;
	case 50:
#line 131 "Lexer/DragonLexer.rl"
	{act = 50;}
	break;
	case 51:
#line 134 "Lexer/DragonLexer.rl"
	{act = 53;}
	break;
	case 52:
#line 135 "Lexer/DragonLexer.rl"
	{act = 54;}
	break;
	case 53:
#line 136 "Lexer/DragonLexer.rl"
	{act = 55;}
	break;
	case 54:
#line 137 "Lexer/DragonLexer.rl"
	{act = 56;}
	break;
	case 55:
#line 140 "Lexer/DragonLexer.rl"
	{act = 57;}
	break;
	case 56:
#line 141 "Lexer/DragonLexer.rl"
	{act = 58;}
	break;
	case 57:
#line 143 "Lexer/DragonLexer.rl"
	{act = 60;}
	break;
	case 58:
#line 146 "Lexer/DragonLexer.rl"
	{act = 63;}
	break;
	case 59:
#line 155 "Lexer/DragonLexer.rl"
	{act = 72;}
	break;
	case 60:
#line 156 "Lexer/DragonLexer.rl"
	{act = 73;}
	break;
	case 61:
#line 157 "Lexer/DragonLexer.rl"
	{act = 74;}
	break;
	case 62:
#line 158 "Lexer/DragonLexer.rl"
	{act = 75;}
	break;
	case 63:
#line 159 "Lexer/DragonLexer.rl"
	{act = 76;}
	break;
	case 64:
#line 160 "Lexer/DragonLexer.rl"
	{act = 77;}
	break;
	case 65:
#line 161 "Lexer/DragonLexer.rl"
	{act = 78;}
	break;
	case 66:
#line 162 "Lexer/DragonLexer.rl"
	{act = 79;}
	break;
	case 67:
#line 163 "Lexer/DragonLexer.rl"
	{act = 80;}
	break;
	case 68:
#line 164 "Lexer/DragonLexer.rl"
	{act = 81;}
	break;
	case 69:
#line 165 "Lexer/DragonLexer.rl"
	{act = 82;}
	break;
	case 70:
#line 166 "Lexer/DragonLexer.rl"
	{act = 83;}
	break;
	case 71:
#line 167 "Lexer/DragonLexer.rl"
	{act = 84;}
	break;
	case 72:
#line 171 "Lexer/DragonLexer.rl"
	{act = 88;}
	break;
	case 73:
#line 173 "Lexer/DragonLexer.rl"
	{act = 90;}
	break;
	case 74:
#line 174 "Lexer/DragonLexer.rl"
	{act = 91;}
	break;
	case 75:
#line 175 "Lexer/DragonLexer.rl"
	{act = 92;}
	break;
	case 76:
#line 176 "Lexer/DragonLexer.rl"
	{act = 93;}
	break;
	case 77:
#line 177 "Lexer/DragonLexer.rl"
	{act = 94;}
	break;
	case 78:
#line 180 "Lexer/DragonLexer.rl"
	{act = 97;}
	break;
	case 79:
#line 181 "Lexer/DragonLexer.rl"
	{act = 98;}
	break;
	case 80:
#line 182 "Lexer/DragonLexer.rl"
	{act = 99;}
	break;
	case 81:
#line 186 "Lexer/DragonLexer.rl"
	{act = 103;}
	break;
	case 82:
#line 189 "Lexer/DragonLexer.rl"
	{act = 106;}
	break;
	case 83:
#line 202 "Lexer/DragonLexer.rl"
	{act = 119;}
	break;
	case 84:
#line 205 "Lexer/DragonLexer.rl"
	{act = 122;}
	break;
	case 85:
#line 206 "Lexer/DragonLexer.rl"
	{act = 123;}
	break;
	case 86:
#line 207 "Lexer/DragonLexer.rl"
	{act = 124;}
	break;
	case 87:
#line 210 "Lexer/DragonLexer.rl"
	{act = 125;}
	break;
	case 88:
#line 221 "Lexer/DragonLexer.rl"
	{act = 128;}
	break;
	case 89:
#line 229 "Lexer/DragonLexer.rl"
	{act = 132;}
	break;
	case 90:
#line 231 "Lexer/DragonLexer.rl"
	{act = 133;}
	break;
	case 91:
#line 87 "Lexer/DragonLexer.rl"
	{te = p+1;}
	break;
	case 92:
#line 88 "Lexer/DragonLexer.rl"
	{te = p+1;}
	break;
	case 93:
#line 132 "Lexer/DragonLexer.rl"
	{te = p+1;{ Keyword("CONTEXT");   }}
	break;
	case 94:
#line 133 "Lexer/DragonLexer.rl"
	{te = p+1;{ Keyword("EXCEPTION"); }}
	break;
	case 95:
#line 144 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("SEMICOLON"); }}
	break;
	case 96:
#line 148 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("RBRACKET");  }}
	break;
	case 97:
#line 149 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("LBRACE");    }}
	break;
	case 98:
#line 150 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("RBRACE");    }}
	break;
	case 99:
#line 151 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("LPAREN");    }}
	break;
	case 100:
#line 152 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("RPAREN");    }}
	break;
	case 101:
#line 153 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("COMMA");     }}
	break;
	case 102:
#line 170 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("IRANGE");    }}
	break;
	case 103:
#line 204 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("BRACKETSASSIGN"); }}
	break;
	case 104:
#line 214 "Lexer/DragonLexer.rl"
	{te = p+1;{ String(); }}
	break;
	case 105:
#line 218 "Lexer/DragonLexer.rl"
	{te = p+1;{ String(); }}
	break;
	case 106:
#line 224 "Lexer/DragonLexer.rl"
	{te = p+1;{ CreateStringBuf(); SetDelimiterChar(); {cs = 194;if (true) goto _again;} }}
	break;
	case 107:
#line 225 "Lexer/DragonLexer.rl"
	{te = p+1;{ CreateStringBuf(); SetDelimiterChar(); {cs = 195;if (true) goto _again;} }}
	break;
	case 108:
#line 226 "Lexer/DragonLexer.rl"
	{te = p+1;{ CreateStringBuf(); SetDelimiterChar(); {cs = 196;if (true) goto _again;} }}
	break;
	case 109:
#line 229 "Lexer/DragonLexer.rl"
	{te = p+1;{ Regex(); }}
	break;
	case 110:
#line 233 "Lexer/DragonLexer.rl"
	{te = p+1;{ Symbol("NEWLINE"); }}
	break;
	case 111:
#line 236 "Lexer/DragonLexer.rl"
	{te = p+1;}
	break;
	case 112:
#line 99 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Keyword("IN");        }}
	break;
	case 113:
#line 109 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Keyword("DEF"); 		}}
	break;
	case 114:
#line 142 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("COLON");     }}
	break;
	case 115:
#line 145 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("POUND");     }}
	break;
	case 116:
#line 147 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("LBRACKET");  }}
	break;
	case 117:
#line 154 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("ASSIGN");    }}
	break;
	case 118:
#line 168 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("DOT");       }}
	break;
	case 119:
#line 169 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("ERANGE");    }}
	break;
	case 120:
#line 172 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("QUESTION");  }}
	break;
	case 121:
#line 178 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("EQUAL");     }}
	break;
	case 122:
#line 179 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("NOTEQUAL");  }}
	break;
	case 123:
#line 183 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("LESSTHAN");  }}
	break;
	case 124:
#line 184 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("LESSTHANEQUAL"); }}
	break;
	case 125:
#line 185 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("GREATERTHAN"); }}
	break;
	case 126:
#line 187 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("LOGICALAND"); }}
	break;
	case 127:
#line 188 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("LOGICALOR"); }}
	break;
	case 128:
#line 190 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("NOT");       }}
	break;
	case 129:
#line 191 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("PLUS");      }}
	break;
	case 130:
#line 192 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("MINUS");     }}
	break;
	case 131:
#line 193 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("MULTIPLY");  }}
	break;
	case 132:
#line 194 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("DIVIDE");    }}
	break;
	case 133:
#line 195 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("MODULO");    }}
	break;
	case 134:
#line 196 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("EXPONENT");  }}
	break;
	case 135:
#line 197 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("SHIFTLEFT"); }}
	break;
	case 136:
#line 198 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("SHIFTRIGHT"); }}
	break;
	case 137:
#line 199 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("BITWISEAND"); }}
	break;
	case 138:
#line 200 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("BITWISEOR"); }}
	break;
	case 139:
#line 201 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("BITWISEXOR"); }}
	break;
	case 140:
#line 203 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Symbol("BRACKETS");  }}
	break;
	case 141:
#line 210 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Token("IDENTIFIER"); }}
	break;
	case 142:
#line 231 "Lexer/DragonLexer.rl"
	{te = p;p--;{ CustomOp(); }}
	break;
	case 143:
#line 239 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Integer(); }}
	break;
	case 144:
#line 240 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Number(); }}
	break;
	case 145:
#line 241 "Lexer/DragonLexer.rl"
	{te = p;p--;{ Hex(); }}
	break;
	case 146:
#line 145 "Lexer/DragonLexer.rl"
	{{p = ((te))-1;}{ Symbol("POUND");     }}
	break;
	case 147:
#line 195 "Lexer/DragonLexer.rl"
	{{p = ((te))-1;}{ Symbol("MODULO");    }}
	break;
	case 148:
#line 231 "Lexer/DragonLexer.rl"
	{{p = ((te))-1;}{ CustomOp(); }}
	break;
	case 149:
#line 239 "Lexer/DragonLexer.rl"
	{{p = ((te))-1;}{ Integer(); }}
	break;
	case 150:
#line 1 "NONE"
	{	switch( act ) {
	case 10:
	{{p = ((te))-1;} {cs = 13;if (true) goto _again;} }
	break;
	case 11:
	{{p = ((te))-1;} CreateStringBuf(); {cs = 191;if (true) goto _again;} }
	break;
	case 12:
	{{p = ((te))-1;} Keyword("CLASS");     }
	break;
	case 13:
	{{p = ((te))-1;} Keyword("MODULE");	}
	break;
	case 14:
	{{p = ((te))-1;} Keyword("SYNC");      }
	break;
	case 15:
	{{p = ((te))-1;} Keyword("THROW");     }
	break;
	case 16:
	{{p = ((te))-1;} Keyword("SET");       }
	break;
	case 17:
	{{p = ((te))-1;} Keyword("FOR");       }
	break;
	case 19:
	{{p = ((te))-1;} Keyword("IF");        }
	break;
	case 20:
	{{p = ((te))-1;} Keyword("UNLESS");    }
	break;
	case 21:
	{{p = ((te))-1;} Keyword("ELSE");      }
	break;
	case 22:
	{{p = ((te))-1;} Keyword("ENSURE");    }
	break;
	case 23:
	{{p = ((te))-1;} Keyword("DO");        }
	break;
	case 24:
	{{p = ((te))-1;} Keyword("END");		}
	break;
	case 25:
	{{p = ((te))-1;} Keyword("BEGIN");     }
	break;
	case 26:
	{{p = ((te))-1;} Keyword("WHILE");     }
	break;
	case 27:
	{{p = ((te))-1;} Keyword("UNTIL");     }
	break;
	case 29:
	{{p = ((te))-1;} Keyword("SELF");      }
	break;
	case 30:
	{{p = ((te))-1;} Keyword("SUPER");     }
	break;
	case 31:
	{{p = ((te))-1;} Keyword("YIELD");     }
	break;
	case 32:
	{{p = ((te))-1;} Keyword("NIL");       }
	break;
	case 33:
	{{p = ((te))-1;} Keyword("CONST");     }
	break;
	case 34:
	{{p = ((te))-1;} Keyword("RETURN");    }
	break;
	case 35:
	{{p = ((te))-1;} Keyword("BREAK");     }
	break;
	case 36:
	{{p = ((te))-1;} Keyword("CONTINUE");  }
	break;
	case 37:
	{{p = ((te))-1;} Keyword("SWITCH");    }
	break;
	case 38:
	{{p = ((te))-1;} Keyword("CASE");      }
	break;
	case 39:
	{{p = ((te))-1;} Keyword("DEFAULT");   }
	break;
	case 40:
	{{p = ((te))-1;} Keyword("RESCUE");    }
	break;
	case 41:
	{{p = ((te))-1;} Keyword("TRUE");      }
	break;
	case 42:
	{{p = ((te))-1;} Keyword("FALSE");     }
	break;
	case 43:
	{{p = ((te))-1;} Keyword("TAND");      }
	break;
	case 44:
	{{p = ((te))-1;} Keyword("TOR");       }
	break;
	case 45:
	{{p = ((te))-1;} Keyword("TNOT");      }
	break;
	case 46:
	{{p = ((te))-1;} Keyword("DEFINED");   }
	break;
	case 47:
	{{p = ((te))-1;} Keyword("INCLUDE");	}
	break;
	case 48:
	{{p = ((te))-1;} Keyword("UNDEF");     }
	break;
	case 49:
	{{p = ((te))-1;} Keyword("REMOVE");    }
	break;
	case 50:
	{{p = ((te))-1;} Keyword("ALIAS");     }
	break;
	case 53:
	{{p = ((te))-1;} Keyword("INTERFACE"); }
	break;
	case 54:
	{{p = ((te))-1;} Keyword("RETRY");	    }
	break;
	case 55:
	{{p = ((te))-1;} Keyword("LOOP");		}
	break;
	case 56:
	{{p = ((te))-1;} Keyword("TYPEOF");	}
	break;
	case 57:
	{{p = ((te))-1;} Symbol("FORWARDPIPE"); }
	break;
	case 58:
	{{p = ((te))-1;} Symbol("BACKWARDPIPE"); }
	break;
	case 60:
	{{p = ((te))-1;} Symbol("DCOLON");    }
	break;
	case 63:
	{{p = ((te))-1;} Symbol("REP");       }
	break;
	case 72:
	{{p = ((te))-1;} Symbol("ADDASSIGN"); }
	break;
	case 73:
	{{p = ((te))-1;} Symbol("SUBASSIGN"); }
	break;
	case 74:
	{{p = ((te))-1;} Symbol("MULASSIGN"); }
	break;
	case 75:
	{{p = ((te))-1;} Symbol("DIVASSIGN"); }
	break;
	case 76:
	{{p = ((te))-1;} Symbol("MODASSIGN"); }
	break;
	case 77:
	{{p = ((te))-1;} Symbol("EXPASSIGN"); }
	break;
	case 78:
	{{p = ((te))-1;} Symbol("SHLASSIGN"); }
	break;
	case 79:
	{{p = ((te))-1;} Symbol("SHRASSIGN"); }
	break;
	case 80:
	{{p = ((te))-1;} Symbol("ANDASSIGN"); }
	break;
	case 81:
	{{p = ((te))-1;} Symbol("ORASSIGN");  }
	break;
	case 82:
	{{p = ((te))-1;} Symbol("XORASSIGN"); }
	break;
	case 83:
	{{p = ((te))-1;} Symbol("CONDASSIGNO"); }
	break;
	case 84:
	{{p = ((te))-1;} Symbol("CONDASSIGNA"); }
	break;
	case 88:
	{{p = ((te))-1;} Symbol("HASH");      }
	break;
	case 90:
	{{p = ((te))-1;} Symbol("PERCENT");   }
	break;
	case 91:
	{{p = ((te))-1;} Symbol("REGEXMATCH"); }
	break;
	case 92:
	{{p = ((te))-1;} Symbol("REGEXNOMATCH"); }
	break;
	case 93:
	{{p = ((te))-1;} Symbol("UPLUS");     }
	break;
	case 94:
	{{p = ((te))-1;} Symbol("UMINUS");    }
	break;
	case 97:
	{{p = ((te))-1;} Symbol("WHEN");      }
	break;
	case 98:
	{{p = ((te))-1;} Symbol("WHENNOT");   }
	break;
	case 99:
	{{p = ((te))-1;} Symbol("COMPARE");   }
	break;
	case 103:
	{{p = ((te))-1;} Symbol("GREATERTHANEQUAL"); }
	break;
	case 106:
	{{p = ((te))-1;} Symbol("LOGICALXOR"); }
	break;
	case 119:
	{{p = ((te))-1;} Symbol("BITWISEINVERSE"); }
	break;
	case 122:
	{{p = ((te))-1;} Symbol("INCREMENT"); }
	break;
	case 123:
	{{p = ((te))-1;} Symbol("DECREMENT"); }
	break;
	case 124:
	{{p = ((te))-1;} Symbol("SWITCHOP");  }
	break;
	case 125:
	{{p = ((te))-1;} Token("IDENTIFIER"); }
	break;
	case 128:
	{{p = ((te))-1;} DelimiterFound = false; CreateDelimiter(); CreateStringBuf(); {cs = 193;if (true) goto _again;} }
	break;
	case 132:
	{{p = ((te))-1;} Regex(); }
	break;
	case 133:
	{{p = ((te))-1;} CustomOp(); }
	break;
	}
	}
	break;
#line 1831 "obj/Debug/DragonLexer.cs"
		default: break;
		}
	}

_again:
	_acts = _dragon_lexer_to_state_actions[cs];
	_nacts = _dragon_lexer_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _dragon_lexer_actions[_acts++] ) {
	case 1:
#line 1 "NONE"
	{ts = -1;}
	break;
#line 1845 "obj/Debug/DragonLexer.cs"
		default: break;
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _dragon_lexer_eof_trans[cs] > 0 ) {
		_trans = (short) (_dragon_lexer_eof_trans[cs] - 1);
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 332 "Lexer/DragonLexer.rl"

			if(cs == dragon_lexer_error) {
				throw new SyntaxErrorException("Lexer error");
			}
		}
	}
}
